{"componentChunkName":"component---src-templates-blog-js","path":"/algos/234_Palindrome_Linked_List","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Palindrome Linked List","date":"2020.05.06","number":234},"html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#-two-pointer-shichunyu-on-may-6-2020\">✅ Two Pointer @shichunyu on May 6, 2020</a></li>\n<li><a href=\"#find-midpoint--using-stack\">Find Midpoint &#x26; Using Stack</a></li>\n<li><a href=\"#reversing-list\">Reversing List</a></li>\n<li><a href=\"#using-dequeue\">Using Dequeue</a></li>\n</ul>\n</div>\n<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<p>Question Source: <a href=\"https://leetcode.com/problems/palindrome-linked-list\">https://leetcode.com/problems/palindrome-linked-list</a></p>\n<h1 id=\"-two-pointer-shichunyu-on-may-6-2020\" style=\"position:relative;\"><a href=\"#-two-pointer-shichunyu-on-may-6-2020\" aria-label=\" two pointer shichunyu on may 6 2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Two Pointer @shichunyu on May 6, 2020</h1>\n<p>Runtime: 80 ms, faster than 22.80% of Python3 online submissions for Palindrome Linked List. Memory Usage: 28.9 MB, less than 7.69% of Python3 online submissions for Palindrome Linked List.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        left <span class=\"token operator\">=</span> head\n        right <span class=\"token operator\">=</span> head\n        idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\"># If empty ListNode [] return False</span>\n        <span class=\"token keyword\">if</span> head <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token comment\"># If only one number [0] return True</span>\n        <span class=\"token keyword\">if</span> right<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token comment\"># move right pointer to very end</span>\n        <span class=\"token comment\"># initialize dictionary to allow back-tracking</span>\n        <span class=\"token keyword\">while</span> right<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right\n            right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token comment\"># check if is palindrome until the middle</span>\n        <span class=\"token keyword\">while</span> right <span class=\"token operator\">!=</span> left <span class=\"token keyword\">and</span> left<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> right<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'checks out'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            right <span class=\"token operator\">=</span> memo<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            idx <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># if ODD: both at center node</span>\n        <span class=\"token keyword\">if</span> right <span class=\"token operator\">==</span> left<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token comment\"># If EVEN: check if values are same</span>\n        <span class=\"token keyword\">if</span> right<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>   \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token comment\"># d = ListNode(1)</span>\n<span class=\"token comment\"># c = ListNode(2,d)</span>\n<span class=\"token comment\"># b = ListNode(2,c)</span>\n<span class=\"token comment\"># a = ListNode(1,b)</span>\n\n<span class=\"token comment\"># s = Solution()</span>\n<span class=\"token comment\"># print (s.isPalindrome(a)) # True</span>\n\n<span class=\"token comment\"># f = ListNode(2) </span>\n<span class=\"token comment\"># e = ListNode(1,f)</span>\n\n<span class=\"token comment\"># s = Solution()</span>\n<span class=\"token comment\"># print(s.isPalindrome(e)) # False</span>\n\ne <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\nd <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n\ns <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>isPalindrome<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\n1 -> 2 -> 2 -> 1 Even\n     l    r\n1 >2 > 3 > 2 > 0 > 2 > 3 > 2 > 1 Odd\n^          ^       ^             ^\n\n\"\"\"</span></code></pre></div>\n<h1 id=\"find-midpoint--using-stack\" style=\"position:relative;\"><a href=\"#find-midpoint--using-stack\" aria-label=\"find midpoint  using stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Find Midpoint &#x26; Using Stack</h1>\n<p><code class=\"language-text\">O(N) Time</code> <code class=\"language-text\">O(N/2) Space</code></p>\n<p><strong>Question:</strong> would this work for odd lists?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> head <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token comment\"># 1. Get the midpoint (slow)</span>\n    slow <span class=\"token operator\">=</span> fast <span class=\"token operator\">=</span> cur <span class=\"token operator\">=</span> head\n    <span class=\"token keyword\">while</span> fast <span class=\"token keyword\">and</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n        fast<span class=\"token punctuation\">,</span> slow <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token comment\"># 2. Push the second half into the stack</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n        slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 3. Comparison</span>\n    <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> cur<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<h1 id=\"reversing-list\" style=\"position:relative;\"><a href=\"#reversing-list\" aria-label=\"reversing list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reversing List</h1>\n<p><code class=\"language-text\">O(N) Time</code> <code class=\"language-text\">O(1) Space</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nnode = 0\n1 >2 > 3 > 2 > 0 &lt; 2 &lt; 3 &lt; 2 &lt; 1 Odd\nh                              n\n\n\"\"\"</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    fast <span class=\"token operator\">=</span> slow <span class=\"token operator\">=</span> head\n    <span class=\"token comment\"># find the mid node</span>\n    <span class=\"token keyword\">while</span> fast <span class=\"token keyword\">and</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n        fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token comment\"># reverse the second half</span>\n    node <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">while</span> slow<span class=\"token punctuation\">:</span>\n        nxt <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        slow<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> node\n        node <span class=\"token operator\">=</span> slow\n        slow <span class=\"token operator\">=</span> nxt\n    <span class=\"token comment\"># traverse forward &amp; backwards &amp; compare the first and second half nodes</span>\n    <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span> <span class=\"token comment\"># while node and head:</span>\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<h1 id=\"using-dequeue\" style=\"position:relative;\"><a href=\"#using-dequeue\" aria-label=\"using dequeue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Dequeue</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># O(n) space</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    queue <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    cur <span class=\"token operator\">=</span> head\n    <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">:</span>\n        queue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> queue<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>"}},"pageContext":{"slug":"234_Palindrome_Linked_List"}}}