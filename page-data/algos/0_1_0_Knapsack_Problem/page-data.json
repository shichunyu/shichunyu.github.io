{"componentChunkName":"component---src-templates-blog-js","path":"/algos/0_1_0_Knapsack_Problem","result":{"data":{"markdownRemark":{"frontmatter":{"title":"1/0 Knapsack Problem","date":"2020.05.29","number":0},"html":"<h1 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h1>\n<p><strong>Question Souce:</strong> <a href=\"https://www.byte-by-byte.com/01knapsack/\">Byte-to-Byte</a></p>\n<p>Given a list of items with values and weights, as well as a max weight, find the maximum value you can generate from items where the sum of the weights is less than the max.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Example:\n\nitems = {(w:1, v:6), (w:2, v:10), (w:3, v:12)}\nmaxWeight = 5\nknapsack(items, maxWeight) = 22</code></pre></div>\n<h1 id=\"top-down-recursive-apprach\" style=\"position:relative;\"><a href=\"#top-down-recursive-apprach\" aria-label=\"top down recursive apprach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Top-Down Recursive Apprach</h1>\n<h2 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h2>\n<ul>\n<li>We can start with a full knapsack</li>\n<li>If the knapsack is NOT over capacity, then we have our answer - every item should be added.</li>\n<li>If the knapsack IS over capacity, then we have to take out an item. Which item do we remove?</li>\n<li>We can remove any of the items, so we have n possible branches in our decision tree.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                                                         (1,6) (2,10) (3,12) (2,4) w:6 v:28\n              /                                       |                                        |                                       \\\n(2,10) (3,12) (2,4) w:7 v:26            (1,6) (3,12) (2,4) w:6 v:22               (1,6) (2,10) (2,4) w:5 v:20              (1,6) (2,10) (3,12) w:6 v:28</code></pre></div>\n<ul>\n<li>The third branch from the left has already meet the weight limit, so we are going to leave it as is.</li>\n<li>For all the other branches, we need to keep removing items</li>\n</ul>\n<blockquote>\n<p>For the purposes of saving space, I am going to hide the 3rd branch from the graph for now, and use its vale as the placeholder  </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                                                         (1,6) (2,10) (3,12) (2,4) w:6 v:28\n                  /                                                       |                      |                                    \\\n   (2,10) (3,12) (2,4) w:7 v:26                              (1,6) (3,12) (2,4) w:6 v:22       V:20                      (1,6) (2,10) (3,12) w:6 v:28\n    /            |           \\                               /            |           \\                                   /            |           \\  \n(3,12) (2,4) (2,10) (2,4) (2,10) (3,12)               (3,12) (2,4)   (1,6) (2,4)    (1,6) (3,12)                   (2,10) (3,12)  (1,6) (3,12)  (1,6) (2,10)\n  w:5 v:16     w:4 v:14     w:5 v:12                    w:5 v:16       w:3 v:6        w:4 v:18                       w:5 v:22       w:4 v:18      w:3 v:16</code></pre></div>\n<ul>\n<li>We can see that all of the leaf nodes now are within the weight limit.</li>\n<li>Now we just have to pick the leaf node with the highest value, and find the answer.</li>\n<li>Note that we have that \"placeholder\" leaf node with v:20 as well. It should be considered along with the other leaf nodes.</li>\n<li>The leaf node with the highest value is the one with v:22.</li>\n<li>So, the leaf node is (2,10) (3,12) with w:5 v:22.</li>\n<li>For this question we would return the value \"22\" as the answer.</li>\n</ul>\n<h2 id=\"implementation\" style=\"position:relative;\"><a href=\"#implementation\" aria-label=\"implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementation</h2>\n<ul>\n<li>This lends itself naturally to a recursive tree traversal, where the base case is that the weight limit is no longer exceeded.</li>\n<li>Note that there is the opportunity for memoization, because a lot of the problems are solved more than once.</li>\n<li>For example, in the 2nd diagram, you can find the pair (1,6) (2,4) multiple times, as well as (3,12) (2,4), etc.</li>\n<li>The downstream branches are the same for all the repeating pairs, so there is no need to re-calculate them each time</li>\n</ul>\n<p><strong>Algorithm Steps:</strong></p>\n<ol>\n<li>Start at the original array. If the weight limit is not exceeded, simply return the total value as the answer.</li>\n<li>Have a recursive call for each item in the remaining array, where the item is removed to form a new array</li>\n<li>The new array must be passed downstream to its own recursive calls, so that the array gets smaller and smaller</li>\n<li>At each recursive call stack layer, the value of the array must be compared the the maximum value we have encountered so far. The greater of the two is saved.</li>\n<li>Repeat until there are no more leaf nodes with weight exceeding the limit.</li>\n</ol>\n<p>A good exmaple explaining the time complexity from <a href=\"https://www.educative.io/courses/grokking-dynamic-programming-patterns-for-coding-interviews/RM1BDv71V60#top-down-dynamic-programming-with-memoization\">Educative</a></p>\n<p><strong>Runtime:</strong> O(N*M) where N = num of items and M = max_weight<br>\n<strong>Space:</strong> O(N*M) as well for storing the dictionary</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># items = {(w:1, v:6), (w:2, v:10), (w:3, v:12)}</span>\n<span class=\"token comment\"># maxWeight = 5</span>\n<span class=\"token comment\"># knapsack(items, maxWeight) = 22</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">knapsack</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">,</span> max_weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        items type: List[tuple()]\n        maxWeight type: int\n        rtype: int\n\n        returns the maxValue possible from putting items into knapsack without going over the maxWeight\n        \"\"\"</span>\n        max_value <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-inf'</span><span class=\"token punctuation\">)</span>\n        cur_weight <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        cur_value <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">:</span>\n            cur_weight <span class=\"token operator\">+=</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            cur_value <span class=\"token operator\">+=</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># print(cur_weight)</span>\n        <span class=\"token comment\"># print(cur_value)</span>\n        <span class=\"token keyword\">if</span> cur_weight <span class=\"token operator\">&lt;=</span> max_weight<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> cur_value\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            ans <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_recursion<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> max_weight<span class=\"token punctuation\">,</span> cur_weight<span class=\"token punctuation\">,</span> cur_value<span class=\"token punctuation\">,</span> max_value<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># print(memo)</span>\n            <span class=\"token keyword\">return</span> ans\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">_recursion</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">,</span> max_weight<span class=\"token punctuation\">,</span> cur_weight<span class=\"token punctuation\">,</span> cur_value<span class=\"token punctuation\">,</span> max_value<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            new_items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n            new_weight <span class=\"token operator\">=</span> cur_weight\n            new_value <span class=\"token operator\">=</span> cur_value\n            new_weight <span class=\"token operator\">-=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            new_value <span class=\"token operator\">-=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token comment\"># print(new_items)</span>\n            <span class=\"token comment\"># print(new_weight)</span>\n            <span class=\"token comment\"># print(new_value)</span>\n            <span class=\"token keyword\">if</span> new_weight <span class=\"token operator\">&lt;=</span> max_weight<span class=\"token punctuation\">:</span>\n                max_value <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>new_value<span class=\"token punctuation\">,</span> max_value<span class=\"token punctuation\">)</span>\n                max_value <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>new_value<span class=\"token punctuation\">,</span> max_value<span class=\"token punctuation\">)</span>   \n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>new_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> memo<span class=\"token punctuation\">:</span>\n                    max_value <span class=\"token operator\">=</span> max_value <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>new_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> max_value<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">del</span> new_items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                max_value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_recursion<span class=\"token punctuation\">(</span>new_items<span class=\"token punctuation\">,</span> max_weight<span class=\"token punctuation\">,</span> new_weight<span class=\"token punctuation\">,</span> new_value<span class=\"token punctuation\">,</span> max_value<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span>\n        memo<span class=\"token punctuation\">[</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max_value\n        <span class=\"token keyword\">return</span> max_value\n                \ns <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>knapsack<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 22</span>\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>knapsack<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 220</span>\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>knapsack<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 90</span>\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>knapsack<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 65</span>\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>knapsack<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 40</span>\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>knapsack<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 60</span>\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>knapsack<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 90</span></code></pre></div>\n<h1 id=\"dynamic-programming-approach-shichunyu-on-may-29-2020\" style=\"position:relative;\"><a href=\"#dynamic-programming-approach-shichunyu-on-may-29-2020\" aria-label=\"dynamic programming approach shichunyu on may 29 2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Programming Approach @shichunyu on May 29, 2020</h1>\n<p>m is the width and n is the height of the DP table</p>\n<p><strong>Runtime:</strong> O(mxn) because we visit each cell of the table once<br>\n<strong>Space:</strong> O(mxn) where we build a table of mxn size</p>\n<p>Great explanation: <a href=\"https://www.youtube.com/watch?v=xCbYmUPvc2Q\">Back-to-Back SWE</a> and AlgoExpert.io</p>\n<p>Here is what the DP table looks like for our solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[       0  1   2   3   4   5\n       [0, 0,  0,  0,  0,  0], \n(1, 6) [0, 6,  6,  6,  6,  6], \n(2,10) [0, 6, 10, 16, 16, 16], \n(3,12) [0, 6, 10, 16, 18, 22]\n]</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">knapsack</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">,</span> max_weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        items type: List[tuple()]\n        maxWeight type: int\n        rtype: int\n\n        returns the maxValue possible from putting items into knapsack without going over the maxWeight\n        \"\"\"</span>\n        <span class=\"token comment\"># Create our table with 1 extra width &amp; height to account for 0 and []</span>\n        table_width <span class=\"token operator\">=</span> max_weight <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        table_height <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        table <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> table_width <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>table_height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># print(table)</span>\n        <span class=\"token comment\"># print(table_width,table_height)</span>\n\n        <span class=\"token comment\"># Iterative through table, skipping the first row because we know [] is always 0 value</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>table_height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cur_weight <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            cur_val <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token comment\"># go through all the knapsack sizes</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>table_width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                prev_val <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> j <span class=\"token operator\">&lt;</span> cur_weight<span class=\"token punctuation\">:</span>\n                    table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prev_val\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    new_val <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>cur_weight<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cur_val\n                    table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>new_val<span class=\"token punctuation\">,</span> prev_val<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># print(table)</span>\n        <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n\ns <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>knapsack<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>"}},"pageContext":{"slug":"0_1_0_Knapsack_Problem"}}}