{"componentChunkName":"component---src-templates-blog-js","path":"/algos/160._Intersection_of_Two_Linked_Lists","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Intersection of Two Linked Lists","date":"2020.05.22","number":160},"html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n</ul>\n</div>\n<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<p>Write a program to find the node at which the intersection of two singly linked lists begins. Example 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\nOutput: Reference of the node with value = 8\nInput Explanation: The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.</code></pre></div>\n<p>Example 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Reference of the node with value = 2\nInput Explanation: The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.</code></pre></div>\n<p>Example 3:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: null\nInput Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.</code></pre></div>\n<p><strong>Notes:</strong></p>\n<p>If the two linked lists have no intersection at all, return null. The linked lists must retain their original structure after the function returns. You may assume there are no cycles anywhere in the entire linked structure. Your code should preferably run in O(n) time and use only O(1) memory.</p>\n<h2 id=\"-chunyu--may-5-2020\" style=\"position:relative;\"><a href=\"#-chunyu--may-5-2020\" aria-label=\" chunyu  may 5 2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ ChunYu @ May 5, 2020</h2>\n<p>Runtime: 196 ms, faster than 10.04% of Python3 online submissions for Intersection of Two Linked Lists. Memory Usage: 30.5 MB, less than 100.00% of Python3 online submissions for Intersection of Two Linked Lists.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> headA<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">,</span> headB<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">=</span> headA\n        b <span class=\"token operator\">=</span> headB\n        memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> a <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> b<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">elif</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> b\n        <span class=\"token keyword\">elif</span> b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> a\n        <span class=\"token keyword\">elif</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> a\n\n        <span class=\"token keyword\">while</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">or</span> b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">elif</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> memo<span class=\"token punctuation\">:</span> \n                <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">elif</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">==</span> headB<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> headB\n            <span class=\"token keyword\">elif</span> b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">==</span> headA<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> headA\n            <span class=\"token keyword\">elif</span> b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> memo<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n                    memo<span class=\"token punctuation\">[</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a\n                    a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n                <span class=\"token keyword\">if</span> b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n                    memo<span class=\"token punctuation\">[</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b\n                    b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Set up the linked lists</span>\n    a1 <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n    a2 <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n    a3 <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span>\n    a4 <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span>\n\n    b1 <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n    b2 <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n    b3 <span class=\"token operator\">=</span> ListNode<span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span>\n\n    a1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a2\n    a2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a3\n    a3<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> a4\n    b1<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> b2\n    b2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> b3\n\n    s <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> s<span class=\"token punctuation\">.</span>getIntersectionNode<span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span>b1<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"️-solution-using-set\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-solution-using-set\" aria-label=\"️ solution using set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ Solution using Set</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> headA<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">,</span> headB<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        node_set <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        node <span class=\"token operator\">=</span> headA\n        <span class=\"token keyword\">while</span> node<span class=\"token punctuation\">:</span>\n            node_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n        node2 <span class=\"token operator\">=</span> headB\n        <span class=\"token keyword\">while</span> node2<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> node2 <span class=\"token keyword\">in</span> node_set<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n            node2 <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n\n        <span class=\"token keyword\">if</span> node2<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> node2\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre></div>"}},"pageContext":{"slug":"160._Intersection_of_Two_Linked_Lists"}}}