{"componentChunkName":"component---src-templates-blog-js","path":"/algos/380_Insert_Delete_GetRandom","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Insert Delete GetRandom O(1)","date":"2020.06.12","number":380},"html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#dictionary--list-o1--on\">Dictionary + List: O(1) / O(n)</a></li>\n</ul>\n</div>\n<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<p>Question Source: <a href=\"https://leetcode.com/problems/insert-delete-getrandom-o1/\">https://leetcode.com/problems/insert-delete-getrandom-o1/</a></p>\n<h1 id=\"dictionary--list-o1--on\" style=\"position:relative;\"><a href=\"#dictionary--list-o1--on\" aria-label=\"dictionary  list o1  on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionary + List: O(1) / O(n)</h1>\n<h2 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h2>\n<p>Let's review what data structures can help us achieve O(1) runtime for each operation required by the question below:</p>\n<ul>\n<li>\n<p>insert(): add a value to data structure</p>\n<ul>\n<li>Linked List: append()</li>\n<li>deque.append() or deque.appendleft()</li>\n<li>set.add()</li>\n<li>list.append()</li>\n<li>dic[key] = value</li>\n</ul>\n</li>\n<li>\n<p>remove(): remove a value from data structure</p>\n<ul>\n<li>Linked List: pop()</li>\n<li>deque.pop() or deque.popleft()</li>\n<li>list.pop()</li>\n<li>del dic[key]</li>\n</ul>\n</li>\n<li>\n<p>getRandom: basically the question wants us to do <a href=\"https://en.wikipedia.org/wiki/Array_data_structure\">random access</a> in constant time.</p>\n<ul>\n<li>list[idx]</li>\n</ul>\n</li>\n</ul>\n<p>The data structure that allows <a href=\"https://en.wikipedia.org/wiki/Array_data_structure\">random access</a> is an Array, and <a href=\"https://www.reddit.com/r/learnprogramming/comments/5ppg78/how_is_the_python_list_implemented/\">in Python, Lists are really Dynamic Arrays</a>.</p>\n<p>So we know that we have to use Lists, but lists don't give us constant time to insert or remove elements (except at the very end, using <code class=\"language-text\">append()</code> and <code class=\"language-text\">pop()</code>).</p>\n<p>In this case, we can use another data structure in combination with the List - the dictionary.</p>\n<p>The reason we choose a Dictionary is because we need to <em>relate</em> this Dictionary to the List. We'll use the Dictionary for constant time <code class=\"language-text\">insert()</code> and <code class=\"language-text\">remove()</code> but the List for <code class=\"language-text\">getRandom()</code>. </p>\n<p>We need the Dictionary and the List to stay in sync, so that if <code class=\"language-text\">insert()</code> is called, it inserts into both in constant time, and if <code class=\"language-text\">remove()</code> is called, it removes from both in constant time.</p>\n<p>The tricky bit is <code class=\"language-text\">remove()</code> because we can <code class=\"language-text\">del</code> a key from a Dictionary in constant time, but we only <code class=\"language-text\">pop()</code> the last element of a List. In this case, we need the Dictionary and the List to work together.</p>\n<p>This is where the Dictionary being able to store key-value pairs becomes helpful. We can store the index of the List element in the Dictionary, so that we always have a relationship between the Dictionary and the List.</p>\n<p><strong>Example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dic = {         array = [3,2,5,7,4]\n\t3:0,\n\t2:1,\n\t5:2,\n\t7:3,\n\t4:4\n}</code></pre></div>\n<p>So we can see that the dictionary stores the index value for each element in the List.</p>\n<h2 id=\"trace\" style=\"position:relative;\"><a href=\"#trace\" aria-label=\"trace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trace</h2>\n<p>Let's see how the Dictionary and List works with each of the operations required by the question.</p>\n<h3 id=\"insert\" style=\"position:relative;\"><a href=\"#insert\" aria-label=\"insert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Insert()</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dic = {}  array = []</code></pre></div>\n<p><code class=\"language-text\">insert(3)</code> actually results in two operations:</p>\n<ol>\n<li><code class=\"language-text\">array.append(3)</code></li>\n<li><code class=\"language-text\">dic[3] = len(array) -1</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dic = {   array = [3]\n\t3:0\n}</code></pre></div>\n<p>We know the length of the List at any time. When we append <code class=\"language-text\">3</code> to the list it goes to the end, so its index will be <code class=\"language-text\">len(array)-1</code>. We can store the index in the dictionary as the value for key <code class=\"language-text\">3</code>.</p>\n<h2 id=\"remove\" style=\"position:relative;\"><a href=\"#remove\" aria-label=\"remove permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remove()</h2>\n<p>This one gets a little trickier. Say our Dictionary and List looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dic = {         array = [3,2,5,7,4]\n\t3:0,\n\t2:1,\n\t5:2,\n\t7:3,\n\t4:4\n}</code></pre></div>\n<p><code class=\"language-text\">remove(7)</code> will result in these operations:</p>\n<ol>\n<li>Find the index of 7: <code class=\"language-text\">idx = dic[7]</code>. In this case, <code class=\"language-text\">idx = 3</code></li>\n<li>\n<p>To get rid of 7 in the array, simply replace its value with the last element:</p>\n<ul>\n<li>Get the value of the last element: <code class=\"language-text\">last_val = array[-1]</code>. In this case, <code class=\"language-text\">last_val = 4</code></li>\n<li>Replace 7 with 4: <code class=\"language-text\">array[3] = 4</code>'</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dic = {         array = [3,2,5,4,4]\n\t3:0,                       ^\n\t2:1,                       value has changed\n\t5:2,\n\t7:3,\n\t4:4\n}</code></pre></div>\n<p>Now we can just get rid of the last element, since its redundant: <code class=\"language-text\">array.pop()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dic = {         array = [3,2,5,4]\n\t3:0,                         ^\n\t2:1,                         the extra 4 is gone\n\t5:2,\n\t7:3,\n\t4:4\n}</code></pre></div>\n<p>But now, we must update the index of the last element in the dictionary: <code class=\"language-text\">dic[4] = 3</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dic = {         array = [3,2,5,4]\n\t3:0,                         \n\t2:1,                         \n\t5:2,\n\t7:3,\n\t4:3 &lt;- value is updated to the new index\n}</code></pre></div>\n<p>Finally, delete 7 from the dictionary: <code class=\"language-text\">del dic[7]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dic = {         array = [3,2,5,4]\n\t3:0,           \n\t2:1,           \n\t5:2,\n\t4:3 &lt;- the key 7 is deleted\n}</code></pre></div>\n<p>Voila! Our Dictionary and List are now in-sync.</p>\n<h3 id=\"getrandom\" style=\"position:relative;\"><a href=\"#getrandom\" aria-label=\"getrandom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getRandom()</h3>\n<p>Since the indexes for our List start from <code class=\"language-text\">0</code> and end at <code class=\"language-text\">len(array)-1</code> we can generate a random number <code class=\"language-text\">r</code> in that range.</p>\n<p>We can do this in two ways:</p>\n<ol>\n<li>\n<p><code class=\"language-text\">r = math.floor(random.random()*(len(array)))</code></p>\n<ul>\n<li><code class=\"language-text\">random.random()</code> returns a random float between [0,1). Ie: 0.656345293423123...</li>\n<li>If our array is length 4, we want the number to be an integer and between [0,3].</li>\n<li>We multiply our random float by 4, but that can get us something like: 3.235564134 which is out of range.</li>\n<li>\n<p>By using math.floor() we can round down all the float values to a value between [0,3]. </p>\n<ul>\n<li>3.xxxx -> 3</li>\n<li>2.xxxx -> 2</li>\n<li>1.xxxx -> 1</li>\n<li>0.xxxx -> 0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">r = random.randint(0,len(array)-1)</code></p>\n<ul>\n<li>This is a built in method in Python that returns a value between [val1,val2].</li>\n<li><mark>Note that it is inclusive of upper bound (val2)!</mark></li>\n</ul>\n</li>\n</ol>\n<p>Then, we'll return the value for <code class=\"language-text\">r</code> with <code class=\"language-text\">return array[r]</code>.</p>\n<h2 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomizedSet</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Initialize your data structure here.\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\n        \"\"\"</span>\n        <span class=\"token keyword\">if</span> val <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>dic<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        self<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dic<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token comment\"># print(self.dic)</span>\n        <span class=\"token comment\"># print(self.array)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Removes a value from the set. Returns true if the set contained the specified element.\n        \"\"\"</span>\n        <span class=\"token keyword\">if</span> val <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>dic<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        last_val <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>array\n        idx <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dic<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> last_val\n        self<span class=\"token punctuation\">.</span>dic<span class=\"token punctuation\">[</span>last_val<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> idx\n        self<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>dic<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># print(self.dic)</span>\n        <span class=\"token comment\"># print(self.array)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getRandom</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Get a random element from the set.\n        \"\"\"</span>\n        r <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span>\n\n\nobj <span class=\"token operator\">=</span> RandomizedSet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\naction <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"RandomizedSet\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"insert\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"insert\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"remove\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"insert\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"remove\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"getRandom\"</span><span class=\"token punctuation\">]</span>\nval <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> action<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"insert\"</span><span class=\"token punctuation\">:</span>\n        obj<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> action<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"remove\"</span><span class=\"token punctuation\">:</span>\n        obj<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> action<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"getRandom\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>getRandom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>"}},"pageContext":{"slug":"380_Insert_Delete_GetRandom"}}}