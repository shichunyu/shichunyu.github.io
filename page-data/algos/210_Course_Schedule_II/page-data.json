{"componentChunkName":"component---src-templates-blog-js","path":"/algos/210_Course_Schedule_II","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Course Schedule II","date":"2020.05.15","number":210},"html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#resources\">Resources</a></li>\n<li><a href=\"#node-indegree-shichunyu-on-may-15-2020\">Node Indegree @shichunyu on May 15, 2020</a></li>\n</ul>\n</div>\n<h1 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h1>\n<p>Question Source: <a href=\"https://leetcode.com/problems/course-schedule-ii\">https://leetcode.com/problems/course-schedule-ii</a></p>\n<h1 id=\"node-indegree-shichunyu-on-may-15-2020\" style=\"position:relative;\"><a href=\"#node-indegree-shichunyu-on-may-15-2020\" aria-label=\"node indegree shichunyu on may 15 2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node Indegree @shichunyu on May 15, 2020</h1>\n<blockquote>\n<p><code class=\"language-text\">O(V+E) Time &amp; Space Complexity</code> Runtime: 100 ms, faster than 85.76% of Python3 online submissions for Course Schedule II. Memory Usage: 15.1 MB, less than 60.71% of Python3 online submissions for Course Schedule II.  </p>\n</blockquote>\n<p>The problem is a topological sort</p>\n<h4 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h4>\n<ol>\n<li>Use input to count the # of pre-reqs per course -> num_prereqs = [...]</li>\n<li>Use input to create a dependencies dic -> depend = {...:...}</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Input<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nOutput<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\nprereqs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\"># it turns out this is not necessary to build</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span>\n\nnum_prereqs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\ndepend <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>\n    <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span>\n    <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span>\n    <span class=\"token number\">3</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n    <span class=\"token number\">4</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n    <span class=\"token number\">5</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"script\" style=\"position:relative;\"><a href=\"#script\" aria-label=\"script permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Script</h4>\n<ol>\n<li>First find starting courses that has no pre-reqs</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">            0,1,2,3,4,5\nnum_prereqs = [0,1,2,2,2,3]</code></pre></div>\n<ol start=\"2\">\n<li>Add no-prereq courses to stack</li>\n</ol>\n<p>queue = []</p>\n<ol start=\"3\">\n<li>Add to Ans &#x26; remove from stack</li>\n</ol>\n<p>ans = []</p>\n<ol start=\"4\">\n<li>Search what dependencies are now removed and count down the pre-reqs by 1</li>\n<li>If any counter reaches 0, add to queue</li>\n<li>When queue is empty stop processing</li>\n<li>Check if num_prereqs are all 0s</li>\n<li>Go back to 1</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></code></pre></div>\n<p>def findOrder(self, numCourses, prerequisites):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">​```text\n &quot;&quot;&quot;\n :type numCourses: int\n :type prerequisites: List[List[int]]\n :rtype: List[int]\n &quot;&quot;&quot;\n depend = {}\n # build our dependencies list -&gt; we could have also used defaultdict here\n for i in range(numCourses):\n     depend[i] = []\n for i,j in prerequisites:\n     depend[j].append(i)\n # build our num_prereqs counter\n num_prereqs = [0] * numCourses\n for edge in prerequisites: ,0]\n     idx = edge[0]\n     num_prereqs[idx] += 1\n # set up our queue &amp; answer\n ans = []\n queue = []\n # set up our starting queue\n for idx in range(len(num_prereqs)):\n     if num_prereqs[idx] == 0:\n         queue.append(idx)\n # process the queue\n while queue:\n     ready_course = queue.pop()\n     ans.append(ready_course)\n     for dependency in depend[ready_course]:\n         num_prereqs[dependency] -= 1\n         if num_prereqs[dependency] == 0:\n             queue.append(dependency)\n # check if all edges have been removed. If not, then there is a cycle.\n if any(num_prereqs):\n     return []\n else:\n     return ans</code></pre></div>\n<p>s = Solution() print(s.findOrder(6,[[1,0],[2,0],[2,1],[3,1],[3,2],[4,2],[4,3],[5,1],[5,2],[5,4]]))</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># DFS Solution (Leetcode)\n\n&gt; `O(N) Time &amp; Space Complexity`  \n\n\n​```python\nfrom collections import defaultdict\nclass Solution:\n\n    WHITE = 1\n    GRAY = 2\n    BLACK = 3\n\n    def findOrder(self, numCourses, prerequisites):\n        &quot;&quot;&quot;\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        &quot;&quot;&quot;\n\n        # Create the adjacency list representation of the graph\n        adj_list = defaultdict(list) \n\n        # A pair [a, b] in the input represents edge from b --&gt; a\n        for dest, src in prerequisites:\n            adj_list[src].append(dest) # defaultdict lets you insert missing keys. Here the key will just be inserted. \n\n        topological_sorted_order = []\n        is_possible = True\n\n        # By default all vertces are WHITE\n        color = {k: Solution.WHITE for k in range(numCourses)}\n        def dfs(node):\n            nonlocal is_possible # nonlocal allows you to change the global variable without having to pass it back and forth into the function.\n\n            # Don&#39;t recurse further if we found a cycle already\n            if not is_possible:\n                return\n\n            # Start the recursion\n            color[node] = Solution.GRAY\n\n            # Traverse on neighboring vertices\n            if node in adj_list:\n                for neighbor in adj_list[node]:\n                    if color[neighbor] == Solution.WHITE:\n                        dfs(neighbor)\n                    elif color[neighbor] == Solution.GRAY:\n                         # An edge to a GRAY vertex represents a cycle\n                        is_possible = False\n\n            # Recursion ends. We mark it as black\n            color[node] = Solution.BLACK\n            topological_sorted_order.append(node)\n\n        for vertex in range(numCourses):\n            # If the node is unprocessed, then call dfs on it.\n            if color[vertex] == Solution.WHITE:\n                dfs(vertex)\n\n        return topological_sorted_order[::-1] if is_possible else [] # reverses the array using [::-1]</code></pre></div>"}},"pageContext":{"slug":"210_Course_Schedule_II"}}}