{"componentChunkName":"component---src-templates-blog-js","path":"/algos/1_Two_Sum","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Two Sum","date":"2020.06.05","number":1},"html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#resources\">Resources</a></li>\n<li><a href=\"#brute-force-on2--o1\">Brute Force: O(n<sup>2</sup>) / O(1)</a></li>\n<li><a href=\"#brute-force---slicing\">Brute Force - Slicing</a></li>\n<li><a href=\"#binary-search-onlogn--ologn\">Binary Search: O(n*log(n)) / O(log(n))</a></li>\n<li><a href=\"#recursive\">Recursive</a></li>\n<li><a href=\"#recursion-w-memoization\">Recursion w/ Memoization</a></li>\n<li><a href=\"#%EF%B8%8F-hashtabledictionary-solution-on--o1\">⭐️ Hashtable/Dictionary Solution: O(n) / O(1)</a></li>\n</ul>\n</div>\n<h1 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h1>\n<h2 id=\"todo\" style=\"position:relative;\"><a href=\"#todo\" aria-label=\"todo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Todo</h2>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Add in time/space complexity for all solutions</li>\n</ul>\n<h2 id=\"sources\" style=\"position:relative;\"><a href=\"#sources\" aria-label=\"sources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sources</h2>\n<p>Question Source: <a href=\"https://leetcode.com/problems/two-sum/\">Two Sum - LeetCode</a><br>\nResources: AlgoExpert.io</p>\n<h1 id=\"brute-force-on2--o1\" style=\"position:relative;\"><a href=\"#brute-force-on2--o1\" aria-label=\"brute force on2  o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Brute Force: O(n<sup>2</sup>) / O(1)</h1>\n<p>Due to the nested loop, this solution is O(n<sup>2</sup>) runtime.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> b <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> <span class=\"token builtin\">sum</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n                    ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                    ans<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> ans\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    b <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            b <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span><span class=\"token number\">1</span></code></pre></div>\n<h1 id=\"brute-force---slicing\" style=\"position:relative;\"><a href=\"#brute-force---slicing\" aria-label=\"brute force   slicing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Brute Force - Slicing</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            left <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> left <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> left <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n                    b <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span>\n                    ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                    ans<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> ans\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                nums_temp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> left <span class=\"token keyword\">in</span> nums_temp<span class=\"token punctuation\">:</span>\n                    b <span class=\"token operator\">=</span> nums_temp<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span>\n                    ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                    ans<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token operator\">+</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> ans\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<h1 id=\"binary-search-onlogn--ologn\" style=\"position:relative;\"><a href=\"#binary-search-onlogn--ologn\" aria-label=\"binary search onlogn  ologn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binary Search: O(n*log(n)) / O(log(n))</h1>\n<h2 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h2>\n<p>This is an optimization of the Brute Force solution. By sorting the array, we can use binary search to find the amount left.</p>\n<h2 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h2>\n<p><strong>Runtime:</strong> For each item in the array, we have to perform a binary search of log(n) time, so the total runtime is n*log(n)<br>\n<strong>Space:</strong> In the below code, we store the sorted array in a new variable, so space would be O(n). However, technically we can just sort the given input array. In that case, Quick Sort requires O(log(n)) space only and the space required would be O(log(n))</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sorted_nums <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sorted_nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            left <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> sorted_nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> left <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> sorted_nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                sub_nums <span class=\"token operator\">=</span> sorted_nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                values <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_binarySearch<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> sub_nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> values<span class=\"token punctuation\">:</span>\n                    x <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n                    x_value <span class=\"token operator\">=</span> sorted_nums<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n                    y_value <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n                    x_index <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>x_value<span class=\"token punctuation\">)</span>\n                    y_index <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>y_value<span class=\"token punctuation\">)</span>\n\n                    <span class=\"token keyword\">if</span> x_index <span class=\"token operator\">==</span> y_index<span class=\"token punctuation\">:</span>\n                        new_nums <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>x_index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                        y_index <span class=\"token operator\">=</span> new_nums<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>y_value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> x_index <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x_index<span class=\"token punctuation\">,</span> y_index<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x_index<span class=\"token punctuation\">,</span> y_index<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                x_index <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                new_nums <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>x_index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                y_index <span class=\"token operator\">=</span> new_nums<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> x_index <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x_index<span class=\"token punctuation\">,</span> y_index<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_binarySearch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n        lo <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        hi <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> lo <span class=\"token operator\">&lt;=</span> hi<span class=\"token punctuation\">:</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lo <span class=\"token operator\">+</span> hi<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> left<span class=\"token punctuation\">:</span>\n                values <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> values\n            <span class=\"token keyword\">elif</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> left<span class=\"token punctuation\">:</span>\n                lo <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                hi <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span></code></pre></div>\n<h1 id=\"recursive\" style=\"position:relative;\"><a href=\"#recursive\" aria-label=\"recursive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recursive</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># recursion</span>\n<span class=\"token comment\"># bruteforce: timeout</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_helper<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_helper</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> index <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> result\n\n        <span class=\"token comment\"># current num = nums[index]</span>\n        num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># iterate over array and find match that does != same index</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> index <span class=\"token operator\">==</span> i<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            <span class=\"token comment\"># if num and num[i] == target push to result array</span>\n            <span class=\"token keyword\">if</span> num <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n                result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> result\n\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_helper<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">,</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"recursion-w-memoization\" style=\"position:relative;\"><a href=\"#recursion-w-memoization\" aria-label=\"recursion w memoization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recursion w/ Memoization</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># hashmap</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_helper<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>memo<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_helper</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>memo<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> index <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># current num = nums[index]</span>\n        num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> target <span class=\"token operator\">-</span> num <span class=\"token keyword\">in</span> memo<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>memo<span class=\"token punctuation\">[</span>target<span class=\"token operator\">-</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            memo<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> index\n\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_helper<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>memo<span class=\"token punctuation\">,</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"️-hashtabledictionary-solution-on--o1\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-hashtabledictionary-solution-on--o1\" aria-label=\"️ hashtabledictionary solution on  o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ Hashtable/Dictionary Solution: O(n) / O(1)</h1>\n<h2 id=\"intuition-1\" style=\"position:relative;\"><a href=\"#intuition-1\" aria-label=\"intuition 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h2>\n<p>If <code class=\"language-text\">target = num1 + num2</code> then:</p>\n<ul>\n<li><code class=\"language-text\">num1 = target - num2</code></li>\n<li><code class=\"language-text\">num2 = target - num1</code></li>\n</ul>\n<p>We can iterate over the input array for each and see if we have encounter its opposite before. To keep track of which numbers we have already visited previously, we use a dictionary to store the value and its index.</p>\n<p><strong>Runtime:</strong> O(n) because in the worst case, we iterate over the entire given array once<br>\n<strong>Space:</strong> O(n) because in the worst case, we must store a dictionary of the length of the array</p>\n<h2 id=\"code-1\" style=\"position:relative;\"><a href=\"#code-1\" aria-label=\"code 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> memo<span class=\"token punctuation\">:</span>\n                memo<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> memo\n                    <span class=\"token keyword\">and</span> memo<span class=\"token punctuation\">[</span>target<span class=\"token operator\">-</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>memo<span class=\"token punctuation\">[</span>target<span class=\"token operator\">-</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">]</span>\n\ns <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>twoSum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [0,4]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>twoSum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1,2]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>twoSum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>"}},"pageContext":{"slug":"1_Two_Sum"}}}