{"componentChunkName":"component---src-templates-blog-js","path":"/algos/468. Validate IP Address","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Validate IP Address","date":"2020.06.16","number":468},"html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#resources\">Resources</a></li>\n<li><a href=\"#iterative-on--on\">Iterative: O(n) / O(n)</a></li>\n<li><a href=\"#iterative-on--o1\">Iterative: O(n) / O(1)</a></li>\n</ul>\n</div>\n<h1 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h1>\n<p>Question Source: <a href=\"https://leetcode.com/problems/validate-ip-address/\">https://leetcode.com/problems/validate-ip-address/</a></p>\n<h1 id=\"iterative-on--on\" style=\"position:relative;\"><a href=\"#iterative-on--on\" aria-label=\"iterative on  on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterative: O(n) / O(n)</h1>\n<h2 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h2>\n<p>We can parse the provided IP and see if it fulfills the validation rules. A simple way to do this is to split the IP based on deliminators <code class=\"language-text\">:</code> or <code class=\"language-text\">.</code> and then check the split sections to see if they fit into IPv4 or IPv6 rules.</p>\n<h2 id=\"big-o-analysis\" style=\"position:relative;\"><a href=\"#big-o-analysis\" aria-label=\"big o analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big-O Analysis</h2>\n<p>The runtime is O(n) because we have to do a few operations that all require O(n) time. See comments in the code. For an overview of time complexities in Python, see <a href=\"https://wiki.python.org/moin/TimeComplexity\">Python Wiki</a></p>\n<p>The space is O(n) because we must split string into an array of strings, and that array can have O(n) space in the worst case. This can actually be optimized to O(1) as shown below.</p>\n<h2 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h2>\n<p><mark>Note:</mark></p>\n<ul>\n<li><code class=\"language-text\">isdigit()</code> and <code class=\"language-text\">isnumeric()</code> can both be used. To understand the difference, see <a href=\"https://lerner.co.il/2019/02/17/pythons-str-isdigit-vs-str-isnumeric/\">this article</a>. </li>\n<li><code class=\"language-text\">try... except...</code> is used, but this should be optimized (see second solution below)</li>\n<li>sections with <code class=\"language-text\">*</code> are actually redundant. We check if the str can be turned into a hexadecimal, which means it must be alphanumeric</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">validIPAddress</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> IP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        IP_type <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token comment\"># Check if close to IPv4 or IPv6 format: O(n) / O(1) for x in s</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\".\"</span> <span class=\"token keyword\">in</span> IP<span class=\"token punctuation\">:</span>\n            IP_type <span class=\"token operator\">=</span> <span class=\"token string\">\"IPv4\"</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token string\">\":\"</span> <span class=\"token keyword\">in</span> IP<span class=\"token punctuation\">:</span>\n            IP_type <span class=\"token operator\">=</span> <span class=\"token string\">\"IPv6\"</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>IP_type<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> IP_type <span class=\"token operator\">==</span> <span class=\"token string\">\"IPv4\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># split into array: O(n) / O(n)</span>\n            split <span class=\"token operator\">=</span> IP<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># must have 4 sections: O(1) / O(1)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n            \n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># length can't be more than 3 or 0: O(1) / O(1) for len()</span>\n                <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> \n                    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span> \n                <span class=\"token comment\"># check if number: O(n) / O(1) (not sure about space)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isnumeric<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n                <span class=\"token comment\"># check for leading zero: O(1) / O(1)</span>\n                <span class=\"token keyword\">if</span> split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n                <span class=\"token comment\"># convert str to int: O(n) / O(1)</span>\n                split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># check if number is 255 or less: O(1) / O(1)</span>\n                <span class=\"token keyword\">if</span> split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">255</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"IPv4\"</span>\n\n        <span class=\"token keyword\">elif</span> IP_type <span class=\"token operator\">==</span> <span class=\"token string\">\"IPv6\"</span><span class=\"token punctuation\">:</span>\n            split <span class=\"token operator\">=</span> IP<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># must have 8 sections: O(n) / O(1) for x in s</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># length can't be more than 4 or 0: O(1) / O(1) for len()</span>\n                <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n                <span class=\"token comment\"># check if numbers and letters only: O(n) / O(1)*</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n                <span class=\"token comment\"># must be hexadecimal*</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># O(n) / O(1) (not sure about space)</span>\n                    a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"IPv6\"</span>\n\ns <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Neither - more than four sections</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"12.12.12.12.12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Neither - more than four sections</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"172.16.254.01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Neither - leading zerop</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"172.16.256.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Neither - over 255</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"172.16.254.a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Neither - not numeric</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"172.16.254.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># IPv4</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"2001:0db8:85a3:0:0:8A2E::7334\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Neither - empty section</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"2001:0db8:85a3:0:0:8A$$:0370:7334\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Neither - not alphanumeric</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"2001:0db8:85a3:0000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Neither - less than 8 sections</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"2001:0db8:85G3:0000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Neither - not hexadecimal</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># IPv6</span></code></pre></div>\n<h1 id=\"iterative-on--o1\" style=\"position:relative;\"><a href=\"#iterative-on--o1\" aria-label=\"iterative on  o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterative: O(n) / O(1)</h1>\n<p>Here we refactor the above code as follows:</p>\n<ul>\n<li>reduce <code class=\"language-text\">if, else</code> statements by creating new class methods</li>\n<li>reduce space by checking upfront wether the number of sections are correct for IPv4 or IPv6. This allows the split() operation to become constant space because we always end up with an array of length 4 or 8.</li>\n<li>replace <code class=\"language-text\">try... except...</code> with different logic</li>\n<li>use <code class=\"language-text\">isdigit()</code> instead of <code class=\"language-text\">isnumeric()</code></li>\n<li>instead of using an index in the for loop, we can use the element directly</li>\n<li>combine some <code class=\"language-text\">if</code> statements</li>\n<li>instead of converting each element in the array to an int, we can check directly in the if statement</li>\n<li>remove the redundant section</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">validIPAddress</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> IP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> IP<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span>    self<span class=\"token punctuation\">.</span>checkIPv4<span class=\"token punctuation\">(</span>IP<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> IP<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>checkIPv8<span class=\"token punctuation\">(</span>IP<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">checkIPv4</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> IP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># this new array is constant size of 4</span>\n        array <span class=\"token operator\">=</span> IP<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># length can't be more than 3 and must be a number less than or equal to 255</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> e<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">255</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span> \n            <span class=\"token comment\"># check for leading zero</span>\n            <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"IPv4\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">checkIPv8</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> IP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># this new array is constant size of 8</span>\n        array <span class=\"token operator\">=</span> IP<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span>\n        hex_vals <span class=\"token operator\">=</span> <span class=\"token string\">\"0123456789abcdefABCDEF\"</span>\n        <span class=\"token comment\"># validate each element \"e\" in array</span>\n        <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># length can't be more than 4 or 0</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n            <span class=\"token comment\"># check if hex_valsademical for each characer \"c\" in e</span>\n            <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> e<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> c <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> hex_vals<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Neither\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"IPv6\"</span>\n\ns <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Neither - more than four sections</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"12.12.12.12.12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Neither - more than four sections</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"172.16.254.01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Neither - leading zerop</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"172.16.256.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Neither - over 255</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"172.16.254.a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Neither - not numeric</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"172.16.254.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># IPv4</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"2001:0db8:85a3:0:0:8A2E::7334\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Neither - empty section</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"2001:0db8:85a3:0:0:8A$$:0370:7334\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Neither - not alphanumeric</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"2001:0db8:85a3:0000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Neither - less than 8 sections</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"2001:0db8:85G3:0000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Neither - not hexadecimal</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>validIPAddress<span class=\"token punctuation\">(</span><span class=\"token string\">\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># IPv6</span></code></pre></div>"}},"pageContext":{"slug":"468. Validate IP Address"}}}