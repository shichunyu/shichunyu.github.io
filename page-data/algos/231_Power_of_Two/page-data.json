{"componentChunkName":"component---src-templates-blog-js","path":"/algos/231_Power_of_Two","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Power of Two","date":"2020.06.08","number":231},"html":"<div class=\"toc\">\n<ul>\n<li><a href=\"#overview\">Overview</a></li>\n<li><a href=\"#multiplying-up-on2--o1\">Multiplying Up: O(n<sup>2</sup>) / O(1)</a></li>\n<li><a href=\"#multiplying-up-ologn--o1\">Multiplying Up: O(log(n)) / O(1)</a></li>\n<li><a href=\"#dividing-down-ologn--o1\">Dividing Down: O(log(n)) / O(1)</a></li>\n<li><a href=\"#bit-manipulation-o1--o1\">Bit Manipulation: O(1) / O(1)</a></li>\n</ul>\n</div>\n<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<p>Question Source: <a href=\"https://leetcode.com/problems/power-of-two/\">Power of Two - LeetCode</a></p>\n<h1 id=\"multiplying-up-on2--o1\" style=\"position:relative;\"><a href=\"#multiplying-up-on2--o1\" aria-label=\"multiplying up on2  o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiplying Up: O(n<sup>2</sup>) / O(1)</h1>\n<h2 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h2>\n<p>We can find all the exponent values of 2 starting with exponent 1:</p>\n<p>2<sup>0</sup> = 1<br>\n2<sup>1</sup> = 2<br>\n2<sup>2</sup> = 4<br>\netc.</p>\n<p>When we reach the input <code class=\"language-text\">n</code> then we know that <code class=\"language-text\">n</code> is a power of 2.<br>\nIf we go past the input <code class=\"language-text\">n</code> then we know that <code class=\"language-text\">n</code> is not a power of 2.</p>\n<h2 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h2>\n<p>The downside of this code is that it runs in O(n<sup>2</sup>) time because we have a for loop with an exponential operation inside it.</p>\n<p><code class=\"language-text\">2**exp</code> is an O(n) operation: <code class=\"language-text\">2*2*2*2*2...</code> for <code class=\"language-text\">n</code> times</p>\n<p>This O(n) operation is done on the <code class=\"language-text\">while</code> loop and then in the <code class=\"language-text\">if</code> statement, resulting in O(n<sup>2</sup>) runtime.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPowerOfTwo</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        exp <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span>exp <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span>exp <span class=\"token operator\">==</span> n<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            exp <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\ns <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>isPowerOfTwo<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>isPowerOfTwo<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>isPowerOfTwo<span class=\"token punctuation\">(</span><span class=\"token number\">218</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"multiplying-up-ologn--o1\" style=\"position:relative;\"><a href=\"#multiplying-up-ologn--o1\" aria-label=\"multiplying up ologn  o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiplying Up: O(log(n)) / O(1)</h1>\n<h2 id=\"intuition-1\" style=\"position:relative;\"><a href=\"#intuition-1\" aria-label=\"intuition 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h2>\n<p>We can optimize the code above by storing the final value so that it doesn't have to be re-calculated every time. Instead, we only have to multiply the value by 2 in the while loop.</p>\n<p>Since our value is doubling for every loop, the time complexity is O(log(n))</p>\n<h2 id=\"code-1\" style=\"position:relative;\"><a href=\"#code-1\" aria-label=\"code 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPowerOfTwo</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        val <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> val <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> n<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            val <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<h1 id=\"dividing-down-ologn--o1\" style=\"position:relative;\"><a href=\"#dividing-down-ologn--o1\" aria-label=\"dividing down ologn  o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dividing Down: O(log(n)) / O(1)</h1>\n<h2 id=\"intuition-2\" style=\"position:relative;\"><a href=\"#intuition-2\" aria-label=\"intuition 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h2>\n<p>This is the same concept as the solution above, but instead of multiplying up to the target number, this time we are dividing downwards from the target number.</p>\n<p>Since the target number is halving for every loop, the time complexity is O(log(n)).</p>\n<p>The intuition is a little more tricky, because we have to have arrive at a few insights:</p>\n<ul>\n<li>No odd number can be a power of 2</li>\n<li>Power of 2 number will never result in an odd number if we keep dividing it by 2.</li>\n<li>Power of 2 number will eventually become 1.</li>\n<li>Odd numbers divided by 2 have a remainder, so we can use that to check if any number becomes odd while we divide it.</li>\n</ul>\n<p>If n = 8, then we get: 8 -> 4 -> 2 -> 1. No remainders, it is a power of 2<br>\nIf n = 9, then 9%2 = 1. It is NOT a power of 2<br>\nIf n = 24, then we get: 24 -> 12 -> 6 -> 3. 2%2 = 1. It is NOT a power of 2</p>\n<h2 id=\"code-2\" style=\"position:relative;\"><a href=\"#code-2\" aria-label=\"code 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPowerOfTwo</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">if</span> n<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            \n            n <span class=\"token operator\">/=</span> <span class=\"token number\">2</span> </code></pre></div>\n<p>A more condensed version:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPowerOfTwo</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">while</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            n <span class=\"token operator\">//=</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span></code></pre></div>\n<h1 id=\"bit-manipulation-o1--o1\" style=\"position:relative;\"><a href=\"#bit-manipulation-o1--o1\" aria-label=\"bit manipulation o1  o1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bit Manipulation: O(1) / O(1)</h1>\n<p>There's two ways of doing bit manipulation. First, let's look at the unique properties of powers of two in binary:</p>\n<ul>\n<li>2<sup>0</sup> = 1 => 0001<sub>2</sub> </li>\n<li>2<sup>1</sup> = 2 => 0010<sub>2</sub></li>\n<li>2<sup>2</sup> = 4 => 0100<sub>2</sub></li>\n<li>2<sup>3</sup> = 8 => 1000<sub>2</sub></li>\n</ul>\n<p>As we can see, in binary, any powers of two only has a single <code class=\"language-text\">1</code> digit. How can we use that to our advantage?</p>\n<h2 id=\"checking-the-right-most-1digit\" style=\"position:relative;\"><a href=\"#checking-the-right-most-1digit\" aria-label=\"checking the right most 1digit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Checking the right-most 1digit</h2>\n<p>If a number if binary, then the right-most <code class=\"language-text\">1</code> is the only <code class=\"language-text\">1</code> to exist, so it should be the same as the original number.</p>\n<p><strong>For example:</strong></p>\n<ul>\n<li>4 in binary is <code class=\"language-text\">0100</code>. The right-most <code class=\"language-text\">1</code> digit is: <code class=\"language-text\">0100</code>. Since <code class=\"language-text\">0100</code> = <code class=\"language-text\">0100</code> = 4 we know that 4 is a power of two.</li>\n<li>7 in binary is <code class=\"language-text\">0111</code>. The right-most <code class=\"language-text\">1</code> digit is: <code class=\"language-text\">0001</code>. Since <code class=\"language-text\">0001</code> != <code class=\"language-text\">0111</code> or 7, we know that <code class=\"language-text\">0111</code> is not a power of two.</li>\n</ul>\n<p>The way to check the right-most <code class=\"language-text\">1</code> digit would be to use the formula:</p>\n<blockquote>\n<p>  <code class=\"language-text\">x&amp;(-x) = x</code></p>\n</blockquote>\n<p>How does this formula work?</p>\n<p><code class=\"language-text\">x</code> is our original number</p>\n<p><code class=\"language-text\">-x</code> is the negative of our original number, in binary.</p>\n<p>Python uses <strong>Two's Complement</strong> so <code class=\"language-text\">-x = ~x + 1</code>. If <code class=\"language-text\">x&amp;(-x) = x</code> then the number is a power of two.</p>\n<h3 id=\"trace\" style=\"position:relative;\"><a href=\"#trace\" aria-label=\"trace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trace</h3>\n<p>Let's see a trace of a few examples to see how the formula works:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x = 4          x = 7         x = 6          x = 5\n0100  x        0111  x       0110  x        0101  x\n1011 ~x        1000 ~x       1001 ~x        1010 ~x\n1100 -x        1001 -x       1010 -x        1011 -x\n                      \n0100  x        0111 x        0110  x        0101  x\n1100 -x        1001 -x       1010 -x        1011 -x\n0100  x&amp;(-x)   0001 x&amp;(-x)   0010  x&amp;(-x)   0001  x&amp;(-x)    </code></pre></div>\n<p> When the number is a power of 2, <code class=\"language-text\">x&amp;(-x) = x</code> and that is the formula we can use in our code below.</p>\n<h3 id=\"code-3\" style=\"position:relative;\"><a href=\"#code-3\" aria-label=\"code 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPowerOfTwo</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># edge case</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token comment\"># formula</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> n</code></pre></div>\n<h2 id=\"removing-the-right-most-1-digit\" style=\"position:relative;\"><a href=\"#removing-the-right-most-1-digit\" aria-label=\"removing the right most 1 digit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Removing the right-most 1 digit</h2>\n<p>Since powers of 2 only have a single <code class=\"language-text\">1</code> digit in binary, if we were to remove the right-most <code class=\"language-text\">1</code> digit, since that is the <em>only</em> <code class=\"language-text\">1</code> digit, then the value of the number should become <code class=\"language-text\">0</code>. This wouldn't work if the number is not a power of 2.</p>\n<p>For example:</p>\n<ul>\n<li>4 in binary is <code class=\"language-text\">0100</code>. The right-most <code class=\"language-text\">1</code> digit is: <code class=\"language-text\">0100</code>. Remove it and we'll get <code class=\"language-text\">0000</code>. Since the result is <code class=\"language-text\">0</code>, we know that 4 is a power of 2.</li>\n<li>7 in binary is <code class=\"language-text\">0111</code>. The right-most <code class=\"language-text\">1</code> digit is: <code class=\"language-text\">0001</code>. Remove it and we'll get <code class=\"language-text\">0110</code> which is <code class=\"language-text\">6</code>. Since the result is not <code class=\"language-text\">0</code> we know that 7 is not a power of 2.</li>\n</ul>\n<p>The way to check if removing the right-most <code class=\"language-text\">1</code> digit will result in <code class=\"language-text\">0</code> is to use the formula</p>\n<blockquote>\n<p>  <code class=\"language-text\">x&amp;(x-1) = 0</code></p>\n</blockquote>\n<p><code class=\"language-text\">x</code> is our original number</p>\n<p><code class=\"language-text\">x-1</code> is our original number minus 1.</p>\n<p>If the result is <code class=\"language-text\">0</code> then we know the number is a power of 2.</p>\n<h3 id=\"trace-1\" style=\"position:relative;\"><a href=\"#trace-1\" aria-label=\"trace 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trace</h3>\n<p>Let's see a trace of a few examples to see how the formula works:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x = 4          x = 7         x = 6          x = 5\n0100  x        0111  x       0110  x        0101  x\n0011  x-1      0110  x-1     0101  x-1      0100  x-1\n0000  x&amp;(x-1)  0110  x&amp;(x-1) 0100  x&amp;(x-1)  0100  x&amp;(x-1)  </code></pre></div>\n<p>When the number is a power of 2, <code class=\"language-text\">x&amp;(x-1) = 0</code> and that is the formula we use in our code below.</p>\n<h3 id=\"code-4\" style=\"position:relative;\"><a href=\"#code-4\" aria-label=\"code 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPowerOfTwo</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># edge case</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token comment\"># formula</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></code></pre></div>"}},"pageContext":{"slug":"231_Power_of_Two"}}}