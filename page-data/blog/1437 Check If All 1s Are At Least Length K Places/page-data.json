{"componentChunkName":"component---src-templates-blog-js","path":"/blog/1437 Check If All 1s Are At Least Length K Places","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1 id=\"1437-check-if-all-1s-are-at-least-length-k-places-away\" style=\"position:relative;\"><a href=\"#1437-check-if-all-1s-are-at-least-length-k-places-away\" aria-label=\"1437 check if all 1s are at least length k places away permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1437. Check If All 1's Are at Least Length K Places Away</h1>\n<ul>\n<li>ChunYu: May 02, 2020</li>\n<li>ID: 5401</li>\n<li>Level: Medium</li>\n<li>Minyoung: May 02, 2020</li>\n<li>Tags: 2-Pointer</li>\n</ul>\n<p>Given an array <code>nums</code> of 0s and 1s and an integer <code>k</code>, return <code>True</code> if all 1's are at least <code>k</code> places away from each other, otherwise return <code>False</code>.</p>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/04/15/sample_1_1791.png\" alt=\"https://assets.leetcode.com/uploads/2020/04/15/sample_1_1791.png\"></p>\n<pre><code class=\"language-text\">Input: nums = [1,0,0,0,1,0,0,1], k = 2\nOutput: true\nExplanation: Each of the 1s are at least 2 places away from each other.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/04/15/sample_2_1791.png\" alt=\"https://assets.leetcode.com/uploads/2020/04/15/sample_2_1791.png\"></p>\n<pre><code class=\"language-text\">Input: nums = [1,0,0,1,0,1], k = 2\nOutput: false\nExplanation: The second 1 and third 1 are only one apart from each other.\n</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code class=\"language-text\">Input: nums = [1,1,1,1,1], k = 0\nOutput: true\n</code></pre>\n<p><strong>Example 4:</strong></p>\n<pre><code class=\"language-text\">Input: nums = [0,1,0,1], k = 1\nOutput: true\n</code></pre>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li><code>1 &#x3C;= nums.length &#x3C;= 10^5</code></li>\n<li><code>0 &#x3C;= k &#x3C;= nums.length</code></li>\n<li><code>nums[i]</code> is <code>0</code> or <code>1</code></li>\n</ul>\n<h2 id=\"shichunyu-shi-may-03-2020\" style=\"position:relative;\"><a href=\"#shichunyu-shi-may-03-2020\" aria-label=\"shichunyu shi may 03 2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@shichunyu Shi May 03, 2020</h2>\n<pre><code class=\"language-python\">class Solution:\n    def kLengthApart(self, nums, k):\n        ans = True\n        start = 0\n        finished = False\n        while finished == False:\n            coor = self._movePointer(nums, start)\n            if coor[1] - coor[0] > k:\n                ans = True\n            elif coor == (-1,-1):\n                finished = True\n                return ans\n            else:\n                ans = False\n                return ans\n            if coor[1] != len(nums)-1:\n                start = coor[1]\n            else:\n                return ans\n\n    def _movePointer(self, nums, start):\n        x = start\n        y = None\n        while nums[x] != 1:\n            if x == len(nums)-1 and y == None:\n                return (-1,-1)\n            else:\n                x+=1\n        for i in range(x+1,len(nums)):\n            if nums[i] == 1:\n                y = i\n                return (x,y)\n            elif i == len(nums) -1:\n                return (-1,-1)\n\nproblem = Solution()\nprint(problem.kLengthApart([0,0,0],2)) # true\n</code></pre>"}},"pageContext":{"slug":"1437 Check If All 1s Are At Least Length K Places"}}}