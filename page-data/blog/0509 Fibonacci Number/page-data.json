{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0509 Fibonacci Number","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>0509. Fibonacci Number</h1>\n<h2>509. Fibonacci Number</h2>\n<p>The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,</p>\n<pre><code class=\"language-text\">F(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), for N > 1.\n</code></pre>\n<p>Given N, calculate F(N).</p>\n<h2>Top Down - Recursive</h2>\n<pre><code class=\"language-python\">fib_cache = {}\n\ndef memo_fib(n):\n  global fib_cache\n  if n == 0 or n == 1:\n     return 1\n  if n in fib_cache:\n     return fib_cache[n]\n  ret = memo_fib(n - 1) + memo_fib(n - 2)\n  fib_cache[n] = ret\n  return ret\n</code></pre>\n<h2>Bottom Up - Dynamic Programming</h2>\n<pre><code class=\"language-python\">def dp_fib(n):\n   partial_answers = [1, 1]\n   while len(partial_answers) &#x3C;= n:\n     partial_answers.append(partial_answers[-1] + partial_answers[-2])\n   return partial_answers[n]\n\nprint memo_fib(5), dp_fib(5)\n</code></pre>\n<h2>Dynamic Programming @shichunyu on May 25, 2020</h2>\n<blockquote>\n<p>Runtime: O(N) Space: O(N)</p>\n<p>```python class Solution: def fib(self, N): \"\"\" type N: int rtype: int</p>\n</blockquote>\n<pre><code class=\"language-text\">    returns the Nth fibonacci number, starting with 0\n    \"\"\"\n    cur = 2\n    fib = [0,1]\n    if N >= 2:\n        while cur &#x3C;= N:\n            fib.append(fib[cur-1]+fib[cur-2])\n            # print(fib)\n            cur += 1\n    return fib[N]\n</code></pre>\n<p>s = Solution() print(s.fib(3)) ```</p>"}},"pageContext":{"slug":"0509 Fibonacci Number"}}}