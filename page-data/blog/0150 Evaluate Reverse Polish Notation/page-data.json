{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0150 Evaluate Reverse Polish Notation","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1 id=\"0150-evaluate-reverse-polish-notation\" style=\"position:relative;\"><a href=\"#0150-evaluate-reverse-polish-notation\" aria-label=\"0150 evaluate reverse polish notation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0150. Evaluate Reverse Polish Notation</h1>\n<h2 id=\"150-evaluate-reverse-polish-notation\" style=\"position:relative;\"><a href=\"#150-evaluate-reverse-polish-notation\" aria-label=\"150 evaluate reverse polish notation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>150. Evaluate Reverse Polish Notation</h2>\n<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p>\n<p>Valid operators are +, -, *, /. Each operand may be an integer or another expression.</p>\n<p>Note:</p>\n<p>Division between two integers should truncate toward zero. The given RPN expression is always valid. That means the expression would always evaluate to a result and there won't be any divide by zero operation.</p>\n<pre><code class=\"language-text\">Example 1:\n\nInput: [\"2\", \"1\", \"+\", \"3\", \"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n</code></pre>\n<pre><code class=\"language-text\">Example 2:\n\nInput: [\"4\", \"13\", \"5\", \"/\", \"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\n</code></pre>\n<pre><code class=\"language-text\">Example 3:\n\nInput: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\nOutput: 22\nExplanation: \n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</code></pre>\n<h2 id=\"-using-stacks-shichunyu-on-may-7-2020\" style=\"position:relative;\"><a href=\"#-using-stacks-shichunyu-on-may-7-2020\" aria-label=\" using stacks shichunyu on may 7 2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>âœ… Using Stacks @shichunyu on May 7, 2020</h2>\n<pre><code class=\"language-python\">class Solution:\n    def evalRPN(self, tokens):\n        operators = [\"+\",\"-\",\"*\",\"/\"]\n        stack = []\n\n        for i in tokens:\n            if i not in operators:\n                stack.append(int(i))\n            elif  i in operators:\n                self._helper(stack, i)\n        return stack[0]\n\n    def _helper(self,stack, i):\n        right = stack.pop()\n        left = stack.pop()\n        if i == \"+\":\n            res = left + right\n        elif i == \"-\":\n            res = left - right\n        elif i == \"*\":\n            res = left * right\n        elif i == \"/\":\n            res = int(float(left)/float(right)) # int() makes sure to truncate towards zero. For some reason Leetcode needs float() added in order to work, otherwise the last test (22) fails.\n        stack.append(res)\n\ns = Solution()\nprint(s.evalRPN([\"-78\",\"-33\",\"196\",\"+\",\"-19\",\"-\",\"115\",\"+\",\"-\",\"-99\",\"/\",\"-18\",\"8\",\"*\",\"-86\",\"-\",\"-\",\"16\",\"/\",\"26\",\"-14\",\"-\",\"-\",\"47\",\"-\",\"101\",\"-\",\"163\",\"*\",\"143\",\"-\",\"0\",\"-\",\"171\",\"+\",\"120\",\"*\",\"-60\",\"+\",\"156\",\"/\",\"173\",\"/\",\"-24\",\"11\",\"+\",\"21\",\"/\",\"*\",\"44\",\"*\",\"180\",\"70\",\"-40\",\"-\",\"*\",\"86\",\"132\",\"-84\",\"+\",\"*\",\"-\",\"38\",\"/\",\"/\",\"21\",\"28\",\"/\",\"+\",\"83\",\"/\",\"-31\",\"156\",\"-\",\"+\",\"28\",\"/\",\"95\",\"-\",\"120\",\"+\",\"8\",\"*\",\"90\",\"-\",\"-94\",\"*\",\"-73\",\"/\",\"-62\",\"/\",\"93\",\"*\",\"196\",\"-\",\"-59\",\"+\",\"187\",\"-\",\"143\",\"/\",\"-79\",\"-89\",\"+\",\"-\"])) #165\nprint(s.evalRPN([\"4\", \"13\", \"5\", \"/\", \"+\"]))  # 6\nprint(s.evalRPN([\"2\", \"1\", \"+\", \"3\", \"*\"]))  # 9\nprint(s.evalRPN([\"4\",\"3\",\"-\"]))  # 1\nprint(s.evalRPN([\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]))  # 22\n\n\n\n\"\"\"\nInput: [\"2\", \"1\", \"+\", \"3\", \"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n\n[\"2\", \"1\", \"+\", \"3\", \"*\"]\n3,3,*\n\"\"\"\n</code></pre>"}},"pageContext":{"slug":"0150 Evaluate Reverse Polish Notation"}}}