{"componentChunkName":"component---src-templates-blog-js","path":"/blog/1446 Consecutive Characters","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1 id=\"1446-consecutive-characters\" style=\"position:relative;\"><a href=\"#1446-consecutive-characters\" aria-label=\"1446 consecutive characters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1446. Consecutive Characters</h1>\n<p>Given a string s, the power of the string is the maximum length of a non-empty substring that contains only one unique character.</p>\n<p>Return the power of the string.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code class=\"language-text\">Input: s = \"leetcode\"\nOutput: 2\nExplanation: The substring \"ee\" is of length 2 with the character 'e' only.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code class=\"language-text\">Input: s = \"abbcccddddeeeeedcba\"\nOutv\nExplanation: The substring \"eeeee\" is of length 5 with the character 'e' only.\n</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code class=\"language-text\">Input: s = \"triplepillooooow\"\nOutput: 5\n</code></pre>\n<p><strong>Example 4:</strong></p>\n<pre><code class=\"language-text\">Input: s = \"hooraaaaaaaaaaay\"\nOutput: 11\n</code></pre>\n<p><strong>Example 5:</strong></p>\n<pre><code class=\"language-text\">Input: s = \"tourist\"\nOutput: 1\n</code></pre>\n<h2 id=\"constraints\" style=\"position:relative;\"><a href=\"#constraints\" aria-label=\"constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constraints:</h2>\n<ul>\n<li>1 &#x3C;= s.length &#x3C;= 500</li>\n<li>s contains only lowercase English letters.</li>\n</ul>\n<pre><code class=\"language-python\">class Solution:\n    def maxPower(self, s: str) -> int:\n        power = 0\n        cur_power = 1\n        prev_char = None\n        if s == None:\n            return -1\n        for char in s:\n            if char == prev_char:\n                cur_power += 1\n            else:\n                cur_power = 1\n            if cur_power > power:\n                power = cur_power\n            prev_char = char\n        return power\n\ns = Solution()\nprint(s.maxPower(\"leetcode\")) # 2\nprint(s.maxPower(\"abbcccddddeeeeedcba\")) # 5\nprint(s.maxPower(\"triplepillooooow\")) # 5\nprint(s.maxPower(\"hooraaaaaaaaaaay\")) # 11\nprint(s.maxPower(\"tourist\")) # 1\nprint(s.maxPower(\"\"))\n</code></pre>"}},"pageContext":{"slug":"1446 Consecutive Characters"}}}