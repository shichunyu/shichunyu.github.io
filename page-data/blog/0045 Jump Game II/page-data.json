{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0045 Jump Game II","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>45. Jump Game II</h1>\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\n<p>Each element in the array represents your maximum jump length at that position.</p>\n<p>Your goal is to reach the last index in the minimum number of jumps.</p>\n<ul>\n<li>dsfasdf</li>\n<li>asdfasdf</li>\n<li>asdf</li>\n<li>sadfsdaf</li>\n<li>asdfsdaf</li>\n<li>asdf</li>\n<li>\n<p>asdfsdf</p>\n<pre><code>Example:\n</code></pre>\n</li>\n</ul>\n<p>Input: [2, 3, 1, 1, 4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2.\nJump 1 step from index 0 to 1, then 3 steps to the last index.</p>\n<pre><code>> Note: You can assume that you can always reach the last index.  \n\n## Time Limit Exceeded - May 30, 2020\n```py\n 1. 1. 2. 3. 4. \n[2, 3, 1, 1, 4]\n 0  1  1  2  2\n\nclass Solution:\n    def jump(self, nums):\n        n = len(nums) #2\n        jumps = [float('inf')] * n # [inf,inf]\n        jumps[0] = 0 # [0,-inf]\n        for i in range(n-1): # 0,1\n            for j in range(1,nums[i]+1): # 1->1\n                if i+j &#x3C;= n-1:\n                    jumps[i+j] = min(jumps[i]+1,jumps[i+j])\n        return jumps[n-1]\n</code></pre>\n<h2>Time Limit Exceeded - May 30, 2020</h2>\n<pre><code class=\"language-py\"> 0. 1. 2. 3. 4. \n[2, 3, 1, 1, 4, 3, 2, 0, 1]\n 0  1  1  2  2  3  3  3  3\n\nclass Solution:\n    def jump(self, nums):\n        n = len(nums)  # 2\n        jumps = [float('inf')] * n  # [inf,inf]\n        jumps[0] = 0  # [0,-inf]\n        for i in range(n-1):  # 0,1\n            if jumps[n-1] != float('inf'):\n                break\n            for j in range(1, nums[i]+1):  # 1->1\n                if jumps[n-1] != float('inf'):\n                    break\n                if i+j &#x3C;= n-1:\n                    if jumps[i+j] == float('inf'):\n                      jumps[i+j] = jumps[i]+1\n        return jumps[n-1]\n\n\ns = Solution()\nprint(s.jump([2, 3, 1, 1, 4]))\n</code></pre>\n<h1>Recursive (incomplete - not working) - May 30, 2020</h1>\n<pre><code class=\"language-py\"> 0. 1. 2. 3. 4. \n[2, 3, 1, 1, 4, 3, 2, 0, 1]\n 0  1  1. 2  2. 3        4 \n\n 0 1 2 3 4 5 6\n[4,1,1,3,1,1,1]\n 0     1 1 \ni = 0\njt = 4\nclass Solution:\n    def jump(self, nums):\n        jumps = [float('inf')] * len(nums)\n        jumps[0] = 0\n        i = 0\n\n        return self._recursion(0, nums, jumps)\n\n    def _recursion(self, i, nums, jumps):\n        while jumps[len(nums)-1] == float('inf'):\n            cur_val = nums[i]\n            if i + cur_val &#x3C;= len(nums)-1:\n                jump_to = i + cur_val\n            else:\n                jump_to = len(nums)-1\n            jumps[jump_to] = jumps[i] + 1\n            i = jump_to - 1\n            if jumps[i] == float('inf'):\n                jumps[i] = jumps[i+1]\n                self._recursion(i, nums, jumps)\n            else:\n                while jumps[i] != float('inf'):\n                    if i+1 &#x3C;= len(nums) -1:\n                        i += 1\n                    else:\n                        break\n            \n        return jumps[len(nums)-1]\n\ns = Solution()\nprint(s.jump([1,2,3]))\n</code></pre>"}},"pageContext":{"slug":"0045 Jump Game II"}}}