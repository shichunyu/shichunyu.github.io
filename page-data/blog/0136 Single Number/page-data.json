{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0136 Single Number","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1 id=\"0136-single-number\" style=\"position:relative;\"><a href=\"#0136-single-number\" aria-label=\"0136 single number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0136. Single Number</h1>\n<h2 id=\"136-single-number\" style=\"position:relative;\"><a href=\"#136-single-number\" aria-label=\"136 single number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>136. Single Number</h2>\n<p>Given a non-empty array of integers, every element appears twice except for one. Find that single one.</p>\n<p>Note:</p>\n<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\n<pre><code class=\"language-text\">Example 1:\n\nInput: [2,2,1]\nOutput: 1\nExample 2:\n\nInput: [4,1,2,1,2]\nOutput: 4\n\n4: 0\n1: 1\n2: 2\n\ni = 3 // 1\n</code></pre>\n<h2 id=\"-chunyu--may-4-2020\" style=\"position:relative;\"><a href=\"#-chunyu--may-4-2020\" aria-label=\" chunyu  may 4 2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>âœ… Chunyu @ May 4, 2020</h2>\n<p>Runtime: 1660 ms, faster than 13.76% of Python3 online submissions for Single Number. Memory Usage: 16.4 MB, less than 6.56% of Python3 online submissions for Single Number.</p>\n<pre><code class=\"language-python\">class Solution:\n    def singleNumber(self, nums):\n        ans = []\n        for i in nums:\n            if i not in ans:\n                ans.append(i)\n            else:\n                ans.remove(i)\n        return ans[0]\n\ns = Solution()\n\nprint(s.singleNumber([4,1,2,1,2]))\n</code></pre>\n<h2 id=\"solution-using-dictionary-hash-table\" style=\"position:relative;\"><a href=\"#solution-using-dictionary-hash-table\" aria-label=\"solution using dictionary hash table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution using Dictionary (Hash Table)</h2>\n<pre><code class=\"language-python\">from collections import defaultdict\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        hash_table = defaultdict(int)\n        for i in nums:\n            hash_table[i] += 1\n\n        for i in hash_table:\n            if hash_table[i] == 1:\n                return i\n</code></pre>\n<h2 id=\"solution-using-math--sets\" style=\"position:relative;\"><a href=\"#solution-using-math--sets\" aria-label=\"solution using math  sets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution using Math &#x26; Sets</h2>\n<p><a href=\"https://docs.python.org/2/library/sets.html\">https://docs.python.org/2/library/sets.html</a></p>\n<pre><code class=\"language-python\">class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return 2 * sum(set(nums)) - sum(nums)\n</code></pre>\n<p>sadfsdfsdf asdfsdf</p>\n<h2 id=\"solution-using-xor\" style=\"position:relative;\"><a href=\"#solution-using-xor\" aria-label=\"solution using xor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution using XOR</h2>\n<pre><code class=\"language-python\">class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        a = 0\n        for i in nums:\n            a ^= i\n        return a\n</code></pre>\n<p>How the bit calculation works with XOR ^</p>\n<pre><code class=\"language-text\">[4,1,2,1,2]\n\n100, 001, 010, 001, 010\n\nXOR:\nif diff => 1\nif same => 0\n\n100 ^ 001 = 101\n101 ^ 010 = 111\n111 ^ 001 = 110\n110 ^ 010 = 100\n</code></pre>\n<p>Further Reading: <a href=\"https://www.youtube.com/watch?v=VPw9vPN-3ac\">https://www.youtube.com/watch?v=VPw9vPN-3ac</a></p>"}},"pageContext":{"slug":"0136 Single Number"}}}