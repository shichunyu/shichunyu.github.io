{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0490 The Maze","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>490. The Maze</h1>\n<p>There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>\n<p>Given the ball's start position, the destination and the maze, determine whether the ball could stop at the destination.</p>\n<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.</p>\n<h2>Example 1</h2>\n<pre><code class=\"language-text\">Input 1: a maze represented by a 2D array\n\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n\nInput 2: start coordinate (rowStart, colStart) = (0, 4)\nInput 3: destination coordinate (rowDest, colDest) = (4, 4)\n\nOutput: true\n\nExplanation: One possible way is : left -> down -> left -> down -> right -> down -> right.\n</code></pre>\n<h2>Example 2</h2>\n<pre><code class=\"language-text\">Input 1: a maze represented by a 2D array\n\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n\nInput 2: start coordinate (rowStart, colStart) = (0, 4)\nInput 3: destination coordinate (rowDest, colDest) = (3, 2)\n\nOutput: false\n\nExplanation: There is no way for the ball to stop at the destination.\n</code></pre>\n<h2>Note</h2>\n<ul>\n<li>There is only one ball and one destination in the maze.</li>\n<li>Both the ball and the destination exist on an empty space, and they will not be at the same position initially.</li>\n<li>The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.</li>\n<li>The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.</li>\n</ul>\n<pre><code class=\"language-python\">from collections import deque\n\ndef hasPath(maze, start, destination):\n    row, col = len(maze), len(maze[0])\n    queue = deque([(start[0],start[1])])\n    visited = set()\n    dirs = [(-1,0),(0,-1),(1,0),(0,1)]\n    def neighbors(x,y):\n        temp = []\n        used = set()\n        used.add((x,y))\n        for dx,dy in dirs:\n            nx,ny = x,y\n            while 0 &#x3C;= nx+dx &#x3C; row and 0 &#x3C;= ny+dy &#x3C; col and maze[nx+dx][ny+dy] == 0:\n                nx += dx\n                ny += dy\n            if (nx,ny) not in used:\n                temp.append((nx,ny))\n        return temp\n\n    while queue:\n        cell = queue.popleft()\n        if cell in visited: continue\n        if cell == (destination[0], destination[1]): return True\n        visited.add(cell)\n        for neighbor in neighbors(cell[0],cell[1]):\n            queue.append(neighbor)\n    return False\n\nprint(hasPath([[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]],[0,4],[1,2]))\nprint(hasPath([[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]],[0,4],[3,2]))\n</code></pre>"}},"pageContext":{"slug":"0490 The Maze"}}}