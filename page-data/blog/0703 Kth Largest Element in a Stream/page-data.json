{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0703 Kth Largest Element in a Stream","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>0703. Kth Largest Element in a Stream</h1>\n<p>Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>\n<p>Your KthLargest class will have a constructor which accepts an integer k and an integer array nums, which contains initial elements from the stream. For each call to the method KthLargest.add, return the element representing the kth largest element in the stream.</p>\n<pre><code class=\"language-text\">Example:\n\nint k = 3;\nint[] arr = [4,5,8,2];\nKthLargest kthLargest = new KthLargest(3, arr);\nkthLargest.add(5);   // returns 5\nkthLargest.add(3);   // returns 4\nkthLargest.add(10);  // returns 5\nkthLargest.add(9);   // returns 8\nkthLargest.add(4);   // returns 8\n</code></pre>\n<blockquote>\n<p>Note: You may assume that nums' length ≥ k-1 and k ≥ 1.</p>\n</blockquote>\n<h2>Minimum Priority Queue using Heap @shichunyu on May 22, 2020</h2>\n<blockquote>\n<p>Time O(N*LogN) | O(N) Space Runtime: 140 ms, faster than 38.05% of Python3 online submissions for Kth Largest Element in a Stream. Memory Usage: 17.7 MB, less than 8.70% of Python3 online submissions for Kth Largest Element in a Stream.</p>\n</blockquote>\n<pre><code class=\"language-python\">import heapq\n\nclass KthLargest:\n    def __init__(self, k, nums):\n        self.k = k\n        self.nums = nums\n        self.minPQ = []\n        # O(N) Time / O(N) Space\n        heapq.heapify(self.nums)\n        # print('original heap: ' + str(self.nums))\n\n        # O(N) Time / O(N) Space\n        # Build starting minPQ\n        if len(self.nums) > 0:\n            for num in nums:\n                self.add(num)\n        # print('starting minPQ: ' + str(self.nums))\n\n    # add the new value and return the kth largest value. \n    def add(self, val):\n        # O(N*LogN) time / O(1) Space\n        if len(self.minPQ) &#x3C; self.k:\n            heapq.heappush(self.minPQ,val)\n        elif val > self.minPQ[0]:\n            heapq.heapreplace(self.minPQ,val)\n        # print(self.minPQ)\n        return self.minPQ[0]\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)\n\nif __name__ == '__main__':\n    \"\"\"     \n    k = KthLargest(1,[])\n    print(k.add(-3))\n    print(k.add(-2))\n    print(k.add(-4))\n    print(k.add(0))\n    print(k.add(4)) \n    \"\"\"\n    k = KthLargest(7, [-10, 1, 3, 1, 4, 10, 3, 9, 4, 5, 1])\n\n    print(k.add(3))\n    print(k.add(2))\n    print(k.add(3))\n    print(k.add(1))\n    print(k.add(2))\n    print(k.add(4))\n    print(k.add(5))\n    print(k.add(5))\n    print(k.add(6))\n    print(k.add(7))\n    print(k.add(7))\n    print(k.add(8))\n    print(k.add(2))\n    print(k.add(3))\n    print(k.add(1))\n    print(k.add(1))\n    print(k.add(1))\n    print(k.add(10))\n    print(k.add(11))\n    print(k.add(5))\n    print(k.add(6))\n    print(k.add(2))\n    print(k.add(4))\n    print(k.add(7))\n    print(k.add(8))\n    print(k.add(5))\n    print(k.add(6))\n</code></pre>"}},"pageContext":{"slug":"0703 Kth Largest Element in a Stream"}}}