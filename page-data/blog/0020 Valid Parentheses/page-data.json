{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0020 Valid Parentheses","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>0020. Valid Parentheses</h1>\n<h2>20. Valid Parentheses</h2>\n<p>Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.</p>\n<p>An input string is valid if:</p>\n<ul>\n<li>Open brackets must be closed by the same type of brackets.</li>\n<li>Open brackets must be closed in the correct order.</li>\n</ul>\n<p>Note that an empty string is also considered valid.</p>\n<p>Example 1:</p>\n<pre><code class=\"language-text\">Input: \"()\"\nOutput: true\n</code></pre>\n<p>Example 2:</p>\n<pre><code class=\"language-text\">Input: \"()[]{}\"\nOutput: true\n</code></pre>\n<p>Example 3:</p>\n<pre><code class=\"language-text\">Input: \"(]\"\nOutput: false\n</code></pre>\n<p>Example 4:</p>\n<pre><code class=\"language-text\">Input: \"([)]\"\nOutput: false\n</code></pre>\n<p>Example 5:</p>\n<pre><code class=\"language-text\">Input: \"{[]}\"\nOutput: true\n</code></pre>\n<h2>✅ Stacks @shichunyu on May 5, 2020</h2>\n<p><code>O(N) Time &#x26; Space</code> Runtime: 28 ms, faster than 72.47% of Python3 online submissions for Valid Parentheses. Memory Usage: 13.9 MB, less than 5.22% of Python3 online submissions for Valid Parentheses.</p>\n<pre><code class=\"language-python\">class Solution:\n    def isValid(self, s: str) -> bool:\n        parens = ['(',')','[',']','{','}']\n        stack = []\n\n        if len(s) == 0:\n            return True\n        elif len(s) == 1 or parens.index(s[0]) % 2 != 0:\n            return False\n\n        for c in s:\n            c_idx_p = parens.index(c)\n\n            if c_idx_p % 2 == 0: # modulus checks if there is a remainder, if yes, output 1\n                stack.append(c)\n            else:\n                if len(stack) != 0:\n                    idx_last_stack_item = parens.index(stack[len(stack)-1])\n                    if c_idx_p == idx_last_stack_item + 1:\n                        pop = stack.pop()\n                    else:\n                        return False\n                else:\n                    return False\n\n        if len(stack) == 0:\n            return True\n        else:\n            return False\n\ns = Solution()\nprint(s.isValid(\"{[]}\")) # true\nprint(s.isValid(\"\")) # true\nprint(s.isValid(\"(\")) # false\nprint(s.isValid(\"()\")) # true\nprint(s.isValid(\"[])\")) # false\n</code></pre>\n<h2>⭐️ Elegant Fast Solution</h2>\n<p>20ms</p>\n<pre><code class=\"language-python\">def isValid(self, s):\n    bracket_map = {\"(\": \")\", \"[\": \"]\",  \"{\": \"}\"}\n    open_par = set([\"(\", \"[\", \"{\"])\n    stack = []\n    for i in s:\n        if i in open_par:\n            stack.append(i)\n        elif stack and i == bracket_map[stack[-1]]:\n                stack.pop()\n        else:\n            return False\n    return stack == []\n</code></pre>"}},"pageContext":{"slug":"0020 Valid Parentheses"}}}