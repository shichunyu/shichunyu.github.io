{"componentChunkName":"component---src-templates-blog-js","path":"/blog/2020.06.01 Invert Binary Tree","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>2020.06.01 Invert Binary Tree</h1>\n<p>tags: #*study/lc challenge#</p>\n<h2>BFS Solution</h2>\n<p><strong>Runtime:</strong> O(N) where N is the number of nodes in the tree\n<strong>Space:</strong> O(N) where N is the number of nodes in the tree</p>\n<pre><code class=\"language-py\"># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nfrom collections import deque\n\nclass Solution:\n    def invertTree(self, root: TreeNode) -> TreeNode:\n        \n        if root is None:\n            return root\n        \n        queue = deque()\n        queue.append(root)\n        \n        while queue:\n            node = queue.popleft()\n            node.left, node.right = node.right, node.left\n            \n            if node.left is not None:\n                queue.append(node.left)\n            \n            if node.right is not None:\n                queue.append(node.right)\n                \n        return root\n</code></pre>"}},"pageContext":{"slug":"2020.06.01 Invert Binary Tree"}}}