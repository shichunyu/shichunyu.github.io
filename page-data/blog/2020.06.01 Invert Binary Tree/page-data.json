{"componentChunkName":"component---src-templates-blog-js","path":"/blog/2020.06.01 Invert Binary Tree","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1 id=\"20200601-invert-binary-tree\" style=\"position:relative;\"><a href=\"#20200601-invert-binary-tree\" aria-label=\"20200601 invert binary tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2020.06.01 Invert Binary Tree</h1>\n<p>tags: #*study/lc challenge#</p>\n<h2 id=\"bfs-solution\" style=\"position:relative;\"><a href=\"#bfs-solution\" aria-label=\"bfs solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BFS Solution</h2>\n<p><strong>Runtime:</strong> O(N) where N is the number of nodes in the tree\n<strong>Space:</strong> O(N) where N is the number of nodes in the tree</p>\n<pre><code class=\"language-py\"># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nfrom collections import deque\n\nclass Solution:\n    def invertTree(self, root: TreeNode) -> TreeNode:\n        \n        if root is None:\n            return root\n        \n        queue = deque()\n        queue.append(root)\n        \n        while queue:\n            node = queue.popleft()\n            node.left, node.right = node.right, node.left\n            \n            if node.left is not None:\n                queue.append(node.left)\n            \n            if node.right is not None:\n                queue.append(node.right)\n                \n        return root\n</code></pre>"}},"pageContext":{"slug":"2020.06.01 Invert Binary Tree"}}}