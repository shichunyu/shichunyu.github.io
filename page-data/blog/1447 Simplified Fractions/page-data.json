{"componentChunkName":"component---src-templates-blog-js","path":"/blog/1447 Simplified Fractions","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>1447. Simplified Fractions</h1>\n<p>Given an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. The fractions can be in any order.</p>\n<pre><code class=\"language-text\">Example 1:\n\nInput: n = 2\nOutput: [\"1/2\"]\nExplanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2.\n</code></pre>\n<pre><code class=\"language-text\">Example 2:\n\nInput: n = 3\nOutput: [\"1/2\",\"1/3\",\"2/3\"]\n</code></pre>\n<pre><code class=\"language-text\">Example 3:\n\nInput: n = 4\nOutput: [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]\nExplanation: \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\".\n</code></pre>\n<pre><code class=\"language-text\">Example 4:\n\nInput: n = 1\nOutput: []\n</code></pre>\n<h3>Constraints:</h3>\n<p>1 &#x3C;= n &#x3C;= 100</p>\n<h2>Recursive Solution @shichunyu on May 16, 2020</h2>\n<p>How to detect if a fraction is \"simple\"?</p>\n<p>ODD DENOMINATOR ans = [(1/9), (2/9), (4/9), (5/9), (7/9), (8/9)] divisors = {3}</p>\n<p>1/9 2/9 9%2 != 0 3/9 9%3 = 0 -> ADD TO DIVISORS LIST 4/9 9%4 != 0 5/9 9%5 != 0 6/9 9%6 != 0, 6%3 = 0 7/9 8/9</p>\n<p>EVEN DENOM = 14</p>\n<p>ans = [] divisors = {}</p>\n<p>1/14 2/14 4/14 14%4 !=0 14%2</p>\n<h3>Recursive</h3>\n<p>Since the question wants us to include all the simple fractions for every n &#x3C;= n, we will recurse the function with every n - 1.</p>\n<pre><code class=\"language-python\">class Solution:\n    def simplifiedFractions(self, n):\n        return self._recurse(n, [])\n\n    def _recurse(self, n, ans):\n        ans = [\"1/\" + str(n)]\n        divisors = set()\n        if n == 1:\n            return []\n        for num in range(2, n):\n            fraction = str(num) + \"/\" + str(n)\n            new = fraction not in ans\n            if n%num == 0:\n                divisors.add(num)\n            else: # check if divided by divisor of n\n                if not divisors and new:\n                    ans.append(fraction)\n                else:\n                    add_to_ans = True\n                    for divisor in divisors:\n                        if num%divisor == 0:\n                            add_to_ans = False\n                            break\n                    if add_to_ans == True and new:\n                        ans.append(fraction)\n\n        ans += self._recurse(n-1,ans)\n        return ans\n\n\ns = Solution()\nprint(s.simplifiedFractions(1))\nprint(s.simplifiedFractions(2))\nprint(s.simplifiedFractions(3))\nprint(s.simplifiedFractions(5))\nprint(s.simplifiedFractions(9))\nprint(s.simplifiedFractions(10))\n# print(s.simplifiedFractions(15))\n# print(s.simplifiedFractions(23))\n</code></pre>"}},"pageContext":{"slug":"1447 Simplified Fractions"}}}