{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0000 Majority Element","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>Majority Element</h1>\n<h2>Majority Element</h2>\n<p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.</p>\n<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>\n<pre><code class=\"language-text\">Example 1:\n\nInput: [3,2,3]\nOutput: 3\n</code></pre>\n<pre><code class=\"language-text\">Example 2:\n\nInput: [2,2,1,1,1,2,2]\nOutput: 2\n</code></pre>\n<h2>Dictionary @shichunyu on May 6, 2020</h2>\n<p><code>O(N) Time &#x26; Space</code></p>\n<pre><code class=\"language-python\">class Solution:\n    def majorityElement(self, nums):\n        d = {}\n        maj = None\n        count = 0\n        if nums == None:\n            return -1\n        for i in nums:\n            if i in d:\n                d[i] = d[i]+1\n            else:\n                d[i] = 1\n            if d[i] > count:\n                maj = i\n                count += 1\n        return maj\n\ns = Solution()\nprint(s.majorityElement([2, 2, 1, 1, 1, 2, 2])) # 2\nprint(s.majorityElement([2])) # 2\nprint(s.majorityElement([2, 2, 1])) # 2\nprint(s.majorityElement([2, 2])) # 2\nprint(s.majorityElement([1, 2, 2])) # 2\nprint(s.majorityElement([])) # 2\n\n\"\"\"\n[2,2,1,1,1,2,2]\n\nmaj_el: 2\ncount: 1\n\n2: 2\n1: 3\n\"\"\"\n</code></pre>\n<h2>⭐️ Elegant Solution using Collections</h2>\n<p>Counter from Collections:<a href=\"https://docs.python.org/2/library/collections.html#collections.Counter\">https://docs.python.org/2/library/collections.html#collections.Counter</a></p>\n<p>To understand max(iterable, key): <a href=\"https://stackoverflow.com/questions/27486309/how-does-iter-and-key-in-python-max-min-function-work\">https://stackoverflow.com/questions/27486309/how-does-iter-and-key-in-python-max-min-function-work</a></p>\n<pre><code class=\"language-python\">from collections import Counter\n\n\nclass Solution:\n    def majorityElement(self, nums):\n        counts = Counter(nums)\n        return max(counts.keys(), key=counts.get) # uses the value of the count to compare, and returns the key with the highest count.\n\ns = Solution()\nprint(s.majorityElement([2, 2, 1, 1, 1, 2, 2]))  # 2\n</code></pre>"}},"pageContext":{"slug":"0000 Majority Element"}}}