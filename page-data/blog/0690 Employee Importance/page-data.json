{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0690 Employee Importance","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>690. Employee Importance</h1>\n<ul>\n<li>\n<p><a href=\"0690.-employee-importance.md#690-employee-importance\">690. Employee Importance</a></p>\n<ul>\n<li><a href=\"0690.-employee-importance.md#bfs\">BFS</a></li>\n<li><a href=\"0690.-employee-importance.md#dfs\">DFS</a></li>\n</ul>\n</li>\n</ul>\n<p>You are given a data structure of employee information, which includes the employee's unique id, his importance value and his direct subordinates' id.</p>\n<p>For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like[1, 15, [2]], and employee 2 has[2, 10, [3]], and employee 3 has[3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.</p>\n<p>Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all his subordinates.</p>\n<pre><code class=\"language-text\">Example 1:\n\nInput: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\nOutput: 11\nExplanation:\nEmployee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11.\n</code></pre>\n<p><strong>Note:</strong> One employee has at most one direct leader and may have several subordinates. The maximum number of employees won't exceed 2000.</p>\n<pre><code class=\"language-python\"># Definition for Employee.\nclass Employee:\n    def __init__(self, id: int, importance: int, subordinates: List[int]):\n        self.id = id\n        self.importance = importance\n        self.subordinates = subordinates\n</code></pre>\n<h2>BFS</h2>\n<pre><code class=\"language-python\"># BFS\nclass Solution:\n    def getImportance(self, employees, id):\n        dic = {}\n        # construct dictionary\n        for employee in employees:\n            adjList[employee.id] = employee\n\n        q = deque()\n        q.append(id)\n        ans = 0\n\n        while q:\n            first_e = q.popleft()\n            if first_e not in dic: return 'error'\n            ans += dic[first_e].importance\n            for sub in dic[first_e].subordinates:\n                q.append(sub)\n        return res\n</code></pre>\n<h2>DFS</h2>\n<pre><code class=\"language-python\"># DFS\nclass Solution:\n    def getImportance(self, employees, id):\n        adjList = {}\n        # construct dictionary\n        for employee in employees:\n            adjList[employee.id] = employee\n        # look up employee by id\n        return self._dfs(adjList, id)\n\n    def _dfs(self, adjList, id):\n        ans = adjList[id].importance\n        for sub in adjList[id].subordinates: # int\n            ans += self._dfs(adjList, sub)\n        return ans\n</code></pre>"}},"pageContext":{"slug":"0690 Employee Importance"}}}