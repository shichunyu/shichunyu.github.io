{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0072. Edit Distance (Levenshtein Distance)","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>72. Edit Distance (Levenshtein Distance)</h1>\n<p>Tags: #*study/algos\nRelated To:\nBacklinks:</p>\n<hr>\n<p>Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.</p>\n<p>You have the following 3 operations permitted on a word:</p>\n<ol>\n<li>Insert a character</li>\n<li>Delete a character</li>\n<li>Replace a character</li>\n</ol>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: word1 = “horse”, word2 = “ros”\nOutput: 3\nExplanation: \nhorse -> rorse (replace ‘h’ with ‘r’)\nrorse -> rose (remove ‘r’)\nrose -> ros (remove ‘e’)\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: word1 = “intention”, word2 = “execution”\nOutput: 5\nExplanation: \nintention -> inention (remove ’t’)\ninention -> enention (replace ‘I’ with ‘e’)\nenention -> exention (replace ’n’ with ‘x’)\nexention -> exection (replace ’n’ with ‘c’)\nexection -> execution (insert ‘u’)\n</code></pre>\n<h1>Dynamic Programming Solution - June 1, 2020</h1>\n<p>Word 1 = “horse”\nWord 2 = “ros”</p>\n<p><img src=\"0072.%20Edit%20Distance%20(Levenshtein%20Distance)/2231F871-96A4-4BD7-A937-50B2F6AE4544.png\"></p>\n<pre><code class=\"language-py\">class Solution:\n    def minDistance(*self*, word1, word2):\n        “””\n        Returns the minimum number of operations needed to change word1 into word2\n        word1 type: str\n        word2 type: str\n        rtype: int\n        “””\n        # word1 = “ros”\n        # word2 = “horse”\n        table = [[0] * (len(word2)+1) for _ in range(len(word1)+1)]\n        print(table)\n\n        # populate the first row and first column\n        for row in range(1,len(word1)+1): # 0 - 3\n            table[row][0] = table[row-1][0] + 1\n        for col in range(1,len(word2)+1): # 0 - 5\n            table[0][col] = table[0][col-1] + 1\n        print(table)\n                \n        # populate the rest of the table\n        for row in range(1, len(word1)+1):\n            for col in range(1, len(word2)+1):\n                # if the characters match, simply “cancel them out”\n                if word1[row-1] == word2[col-1]:\n                    table[row][col] = table[row-1][col-1]\n                else:\n                    table[row][col] = min(table[row-1][col]+1,table[row][col-1]+1,table[row-1][col-1]+1)\n        print(table)\n        return table[-1][-1]\n\ns = Solution()\nprint(s.minDistance(“ros”,”horse”))\n</code></pre>"}},"pageContext":{"slug":"0072. Edit Distance (Levenshtein Distance)"}}}