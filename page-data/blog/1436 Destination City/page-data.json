{"componentChunkName":"component---src-templates-blog-js","path":"/blog/1436 Destination City","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>1436. Destination City</h1>\n<ul>\n<li>ChunYu: May 02, 2020</li>\n<li>ID: 5400</li>\n<li>Level: Easy</li>\n<li>Minyoung: May 02, 2020</li>\n</ul>\n<p>You are given the array <code>paths</code>, where <code>paths[i] = [cityAi, cityBi]</code> means there exists a direct path going from <code>cityAi</code> to <code>cityBi</code>. <em>Return the destination city, that is, the city without any path outgoing to another city.</em></p>\n<p>It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code class=\"language-text\">Input: paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\nOutput: \"Sao Paulo\" \nExplanation: Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\".\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code class=\"language-text\">Input: paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\nOutput: \"A\"\nExplanation: All possible trips are: \n\"D\" -> \"B\" -> \"C\" -> \"A\". \n\"B\" -> \"C\" -> \"A\". \n\"C\" -> \"A\". \n\"A\". \nClearly the destination city is \"A\".\n</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code class=\"language-text\">Input: paths = [[\"A\",\"Z\"]]\nOutput: \"Z\"\n</code></pre>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li><code>1 &#x3C;= paths.length &#x3C;= 100</code></li>\n<li><code>paths[i].length == 2</code></li>\n<li><code>1 &#x3C;= cityAi.length, cityBi.length &#x3C;= 10</code></li>\n<li><code>cityAi != cityBi</code></li>\n<li>All strings consist of lowercase and uppercase English letters and the space character.</li>\n</ul>\n<h2>@shichunyu Shi May 02, 2020</h2>\n<pre><code class=\"language-python\">class Solution:\n    def destCity(self, paths):\n        at = paths[0][0]\n        memo = {}\n\n        for i in paths:\n            on = i[0]\n            off = i[1]\n            if at in memo:\n                at = memo[at]\n            memo[on] = off\n        while at in memo:\n            at = memo[at]\n        return at\n\nproblem = Solution()\nprint(problem.destCity([[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]))\n</code></pre>"}},"pageContext":{"slug":"1436 Destination City"}}}