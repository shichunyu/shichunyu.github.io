{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0141 Linked List Cycle","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>0141. Linked List Cycle</h1>\n<h2>141. Linked List Cycle</h2>\n<ul>\n<li><a href=\"0141.-linked-list-cycle.md#141-linked-list-cycle\">141. Linked List Cycle</a></li>\n<li><a href=\"0141.-linked-list-cycle.md#-two-pointer-chunyu--may-4-2020\">✅ Two Pointer ChunYu @ May 4, 2020</a></li>\n<li><a href=\"0141.-linked-list-cycle.md#%EF%B8%8F-two-pointer-walker--runner---elegant-code\">⭐️ Two Pointer Walker &#x26; Runner - elegant code</a></li>\n<li><a href=\"0141.-linked-list-cycle.md#-dictionary-hash-map-chunyu--may-5-2020\">✅ Dictionary (Hash Map) ChunYu @ May 5, 2020</a></li>\n</ul>\n<p>Given a linked list, determine if it has a cycle in it.</p>\n<p>To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.</p>\n<p>Example 1:</p>\n<pre><code class=\"language-text\">Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n</code></pre>\n<p>Example 2:</p>\n<pre><code class=\"language-text\">Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n</code></pre>\n<p>Example 3:</p>\n<pre><code class=\"language-text\">Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n</code></pre>\n<p>Follow up:</p>\n<p>Can you solve it using O(1) (i.e. constant) memory?</p>\n<h2>✅ Two Pointer ChunYu @ May 4, 2020</h2>\n<p>!!! Success O(N) Time &#x26; O(1) Space Runtime: 56 ms, faster than 18.60% of Python3 online submissions for Linked List Cycle. Memory Usage: 17 MB, less than 100.00% of Python3 online submissions for Linked List Cycle.</p>\n<pre><code class=\"language-python\"># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = ListNode(\"head\")\n        self._size = 0\n\n    def insertEnd(self,item): # item is a ListNode\n        cur = self.head\n        while cur.next is not None:\n            cur = cur.next\n        cur.next = ListNode(item)\n        self._size += 1\n\n    def __str__(self):\n        output = \"\"\n        cur_node = self.head.next\n        while(cur_node):\n            output += str(cur_node.val) + \"→\"\n            cur_node = cur_node.next\n        return output\n\n    def cycle(self,node_val):\n        if self._size == 0:\n            return False\n        cur_node = self.head.next\n        while cur_node is not None:\n            if cur_node.val == node_val:\n                dest_node = cur_node\n            if cur_node.next == None:\n                last_node = cur_node\n            cur_node = cur_node.next\n        print(last_node)\n        print(dest_node)\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        slow = head\n        fast = head\n\n        if head == None or head.next == None:\n            return False\n\n        while fast.next != None or slow.next != fast:\n            slow = slow.next\n            fast = fast.next\n            if fast != None:\n                fast = fast.next\n            if fast == None:\n                return False\n            elif id(slow) == id(fast):\n                return True\n\nlinked_list = LinkedList()\n\n# Create the linked list\nfor i in range(1,4):\n    linked_list.insertEnd(i)\n\n# Link the list\nlinked_list.cycle(1)\n\ns = Solution()\nprint(s.hasCycle(linked_list.head))\n</code></pre>\n<h2>⭐️ Two Pointer Walker &#x26; Runner - elegant code</h2>\n<pre><code class=\"language-python\">class Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        walker = head\n        runner = head\n        while runner != None and runner.next != None:\n            walker = walker.next\n            runner = runner.next.next\n            if walker == runner:\n                return True\n        return False\n</code></pre>\n<h2>✅ Dictionary (Hash Map) ChunYu @ May 5, 2020</h2>\n<p>!!! Success O(N) Time &#x26; Space Runtime: 56 ms, faster than 18.60% of Python3 online submissions for Linked List Cycle. Memory Usage: 17 MB, less than 100.00% of Python3 online submissions for Linked List Cycle.</p>\n<pre><code class=\"language-python\">class LinkedList:\n    def __init__(self):\n        self.head = ListNode(\"head\")\n        self._size = 0\n\n    def insertEnd(self,item): # item is a ListNode\n        cur = self.head\n        while cur.next is not None:\n            cur = cur.next\n        cur.next = ListNode(item)\n        self._size += 1\n\n    def __str__(self):\n        output = \"\"\n        cur_node = self.head.next\n        while(cur_node):\n            output += str(cur_node.val) + \"→\"\n            cur_node = cur_node.next\n        return output\n\n    def cycle(self,node_val):\n        if self._size == 0:\n            return False\n        cur_node = self.head.next\n        while cur_node is not None:\n            if cur_node.val == node_val:\n                dest_node = cur_node\n            elif cur_node.next == None:\n                last_node = cur_node\n            cur_node = cur_node.next\n        print(last_node)\n        print(dest_node)\n        last_node.next = dest_node\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        memo = {}\n        if head == None or head.next == None:\n            return False\n        cur_node = head.next\n        while cur_node != None:\n            if id(cur_node) not in memo:\n                memo[id(cur_node)] = 1\n            else:\n                return True\n            cur_node = cur_node.next\n        return False\n\nlinked_list = LinkedList()\n\n# Create the linked list\nfor i in range(1,4):\n    linked_list.insertEnd(i)\n\n# Link the list\nlinked_list.cycle(1)\n\ns = Solution()\nprint(s.hasCycle(linked_list.head))\n</code></pre>"}},"pageContext":{"slug":"0141 Linked List Cycle"}}}