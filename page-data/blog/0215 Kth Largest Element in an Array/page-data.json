{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0215 Kth Largest Element in an Array","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1 id=\"0215-kth-largest-element-in-an-array\" style=\"position:relative;\"><a href=\"#0215-kth-largest-element-in-an-array\" aria-label=\"0215 kth largest element in an array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0215. Kth Largest Element in an Array</h1>\n<h2 id=\"215-kth-largest-element-in-an-array\" style=\"position:relative;\"><a href=\"#215-kth-largest-element-in-an-array\" aria-label=\"215 kth largest element in an array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>215. Kth Largest Element in an Array</h2>\n<ul>\n<li><a href=\"0215.-kth-largest-element-in-an-array.md#215-kth-largest-element-in-an-array\">215. Kth Largest Element in an Array</a></li>\n<li><a href=\"0215.-kth-largest-element-in-an-array.md#minimum-priority-queue-w-minheap-shichunyu-on-may-22-2020\">Minimum Priority Queue w/ MinHeap @shichunyu on May 22, 2020</a></li>\n<li><a href=\"0215.-kth-largest-element-in-an-array.md#codebreakers-solutions\">Codebreakers Solutions</a></li>\n</ul>\n<p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>\n<pre><code class=\"language-text\">Example 1:\n\nInput: [3, 2, 1, 5, 6, 4] and k = 2\nOutput: 5\n</code></pre>\n<pre><code class=\"language-text\">Example 2:\n\nInput: [3, 2, 3, 1, 2, 4, 5, 5, 6] and k = 4\nOutput: 4\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> You may assume k is always valid, 1 ≤ k ≤ array's length.</p>\n</blockquote>\n<h2 id=\"minimum-priority-queue-w-minheap-shichunyu-on-may-22-2020\" style=\"position:relative;\"><a href=\"#minimum-priority-queue-w-minheap-shichunyu-on-may-22-2020\" aria-label=\"minimum priority queue w minheap shichunyu on may 22 2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Minimum Priority Queue w/ MinHeap @shichunyu on May 22, 2020</h2>\n<pre><code class=\"language-python\">import heapq\n\nclass Solution:\n    def findKthLargest(self, nums, k):\n        minPQ = []\n        # O(N*LogN) Time\n        # O(N) Space\n        for num in nums:\n            if len(minPQ) &#x3C; k:\n                # O(LogN)\n                heapq.heappush(minPQ,num)\n            elif minPQ[0] &#x3C; num:\n                # O(LogN)\n                heapq.heapreplace(minPQ,num)\n\n        return minPQ[0]\n\nif __name__ == '__main__':\n    k = Solution()\n    print(k.findKthLargest([3, 2, 1, 5, 6, 4],2)) #5\n    print(k.findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6],4)) #4\n</code></pre>\n<h2 id=\"codebreakers-solutions\" style=\"position:relative;\"><a href=\"#codebreakers-solutions\" aria-label=\"codebreakers solutions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Codebreakers Solutions</h2>\n<p><strong>Solution 1:</strong> use heapsort or some other sort to sort array and count back to Kth largest. => O(N*LogN)</p>\n<pre><code class=\"language-python\">class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        return sorted(nums)[-k]\n</code></pre>\n<p><strong>Solution 2:</strong> Use Minimum Priority Queue with MinHeap. => O(N*LogK) where K is the size of the PQ</p>\n<pre><code class=\"language-python\">import heapq\nclass Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        pq = []\n        for i in range(k):\n            heapq.heappush(pq,nums[i])\n\n        for i in range(k,len(nums)):\n            if nums[i] > pq[0]:\n                heapq.heappop(pq)\n                heapq.heappush(pq,nums[i])\n\n        return pq[0]\n</code></pre>"}},"pageContext":{"slug":"0215 Kth Largest Element in an Array"}}}