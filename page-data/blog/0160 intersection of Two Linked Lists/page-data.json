{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0160 intersection of Two Linked Lists","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1 id=\"160-intersection-of-two-linked-lists\" style=\"position:relative;\"><a href=\"#160-intersection-of-two-linked-lists\" aria-label=\"160 intersection of two linked lists permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>160. Intersection of Two Linked Lists</h1>\n<p>Write a program to find the node at which the intersection of two singly linked lists begins. Example 1:</p>\n<pre><code class=\"language-text\">Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\nOutput: Reference of the node with value = 8\nInput Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n</code></pre>\n<p>Example 2:</p>\n<pre><code class=\"language-text\">Input: intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Reference of the node with value = 2\nInput Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n</code></pre>\n<p>Example 3:</p>\n<pre><code class=\"language-text\">Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: null\nInput Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n</code></pre>\n<p><strong>Notes:</strong></p>\n<p>If the two linked lists have no intersection at all, return null. The linked lists must retain their original structure after the function returns. You may assume there are no cycles anywhere in the entire linked structure. Your code should preferably run in O(n) time and use only O(1) memory.</p>\n<h2 id=\"-chunyu--may-5-2020\" style=\"position:relative;\"><a href=\"#-chunyu--may-5-2020\" aria-label=\" chunyu  may 5 2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ ChunYu @ May 5, 2020</h2>\n<p>Runtime: 196 ms, faster than 10.04% of Python3 online submissions for Intersection of Two Linked Lists. Memory Usage: 30.5 MB, less than 100.00% of Python3 online submissions for Intersection of Two Linked Lists.</p>\n<pre><code class=\"language-python\"># Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n        a = headA\n        b = headB\n        memo = {}\n\n        if not a or not b:\n            return None\n        elif a.next == b:\n            return b\n        elif b.next == a:\n            return a\n        elif a == b:\n            return a\n\n        while a.next or b.next:\n            if a.next == b.next:\n                return a.next\n            elif a.next and id(a.next) in memo: \n                return a.next\n            elif a.next == headB:\n                return headB\n            elif b.next == headA:\n                return headA\n            elif b.next and id(b.next) in memo:\n                return b.next\n            else:\n                if a.next:\n                    memo[id(a.next)] = a\n                    a = a.next\n                if b.next:\n                    memo[id(b.next)] = b\n                    b = b.next\n        return None\n\nif __name__ == '__main__':\n    # Set up the linked lists\n    a1 = ListNode('1')\n    a2 = ListNode('2')\n    a3 = ListNode('3')\n    a4 = ListNode('4')\n\n    b1 = ListNode('1')\n    b2 = ListNode('2')\n    b3 = ListNode('3')\n\n    a1.next = a2\n    a2.next = a3\n    a3.next = a4\n    b1.next = b2\n    b2.next = b3\n\n    s = Solution()\n    assert s.getIntersectionNode(a1,b1)\n</code></pre>\n<h2 id=\"️-solution-using-set\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-solution-using-set\" aria-label=\"️ solution using set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ Solution using Set</h2>\n<pre><code class=\"language-python\">class Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n        node_set = set()\n        node = headA\n        while node:\n            node_set.add(node)\n            node = node.next\n\n        node2 = headB\n        while node2:\n            if node2 in node_set:\n                break\n            node2 = node2.next\n\n        if node2:\n            return node2\n        return None\n</code></pre>"}},"pageContext":{"slug":"0160 intersection of Two Linked Lists"}}}