{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0706 Design Hashmap","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1>0706. Design HashMap</h1>\n<h2>706. Design HashMap</h2>\n<blockquote>\n<p>Note: Other answers on Leetcode are either LOL or cheat.</p>\n</blockquote>\n<p>Design a HashMap without using any built-in hash table libraries.</p>\n<p>To be specific, your design should include these functions:</p>\n<ul>\n<li>put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.</li>\n<li>get(key): Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.</li>\n<li>remove(key) : Remove the mapping for the value key if this map contains the mapping for the key.</li>\n</ul>\n<pre><code class=\"language-text\">Example:\n\nMyHashMap hashMap = new MyHashMap();\nhashMap.put(1, 1);          \nhashMap.put(2, 2);         \nhashMap.get(1);            // returns 1\nhashMap.get(3);            // returns -1 (not found)\nhashMap.put(2, 1);          // update the existing value\nhashMap.get(2);            // returns 1 \nhashMap.remove(2);          // remove the mapping for 2\nhashMap.get(2);            // returns -1 (not found)\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>All keys and values will be in the range of [0, 1000000].</li>\n<li>The number of operations will be in the range of [1, 10000].</li>\n<li>Please do not use the built-in HashMap library.</li>\n</ul>\n<h2>Using a list @shichunyu on May 8, 2020</h2>\n<p><code>Put: O(1) Runtime</code> <code>Get: O(1) Runtime</code> <code>Remove: O(1) Runtime</code></p>\n<p>Runtime: 328 ms, faster than 39.84% of Python3 online submissions for Design HashMap. Memory Usage: 16.9 MB, less than 9.09% of Python3 online submissions for Design HashMap.</p>\n<pre><code class=\"language-python\">class MyHashMap:\n\n    def __init__(self):\n        self.map = []\n\n    def put(self, key: int, value: int) -> None:\n        # increase size of map to fit key as index\n        while len(self.map) -1 &#x3C; key:\n            self.map.append(-1)\n        self.map[key] = value\n\n    def get(self, key: int) -> int:\n        if len(self.map) - 1 >= key:\n            return self.map[key]\n        else:\n            return -1\n\n    def remove(self, key: int) -> None:\n        if len(self.map) -1 >= key:\n            if self.map[key] == -1:\n                print(\"Not in hashtable\")\n            else:\n                self.map[key] = -1\n        else:\n            print(\"Not in hashtable - greater than length\")\n            return -1\n\n    def __str__(self):\n        out = \"\"\n        for i in self.map:\n            out += str(i) + \", \"\n        return out\n\n\n# Your MyHashMap object will be instantiated and called as such:\nobj = MyHashMap()\nobj.put(3,4)\n\nprint(obj)\nprint(obj.get(3)) # 4\nprint(obj.get(1)) # -1\nprint(obj.get(5)) # -1\nobj.put(6,3)\nobj.put(0,2)\nprint(obj)\nprint(obj.get(6)) # 3\nprint(obj.get(0)) # 2\nobj.remove(0)\nprint(obj.get(0)) # -1\nobj.remove(11) # Not in hashtable\nobj.remove(0) # Not in hashtable\nprint(obj)\n# obj.remove(key)\n</code></pre>"}},"pageContext":{"slug":"0706 Design Hashmap"}}}