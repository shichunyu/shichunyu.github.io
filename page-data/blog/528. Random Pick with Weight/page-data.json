{"componentChunkName":"component---src-templates-blog-js","path":"/blog/528. Random Pick with Weight","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Random Pick with Weight","date":"2020.06.05","number":528},"html":"<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#sources\">Sources</a></li>\n<li><a href=\"#description\">Description</a></li>\n<li><a href=\"#explanation\">Explanation</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#brute-force-on2--on2\">Brute Force: O(n<sup>2</sup>) / O(n<sup>2</sup>)</a></p>\n<ul>\n<li><a href=\"#intuition\">Intuition</a></li>\n<li><a href=\"#code\">Code</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#cumulative-sum\">Cumulative Sum</a></p>\n<ul>\n<li><a href=\"#linear-search-on--on\">Linear Search: O(n) / O(n)</a></li>\n<li><a href=\"#binary-search-ologn--on\">Binary Search: O(log(n)) / O(n)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"sources\" style=\"position:relative;\"><a href=\"#sources\" aria-label=\"sources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sources</h2>\n<p>Question Source: <a href=\"https://leetcode.com/problems/random-pick-with-weight/\">Random Pick with Weight - LeetCode</a></p>\n<h2 id=\"description\" style=\"position:relative;\"><a href=\"#description\" aria-label=\"description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Description</h2>\n<p>Given an array w of positive integers, where w[I] describes the weight of index I, write a function pickIndex which randomly picks an index in proportion to its weight.</p>\n<p><strong>Note:</strong></p>\n<pre><code>1 &#x3C;= w.length &#x3C;= 10000\n1 &#x3C;= w[I] &#x3C;= 10^5\npickIndex will be called at most 10000 times.\n</code></pre>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: \n[\"Solution\",\"pickIndex\"]\n[[[1]],[]]\nOutput: [null,0]\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: \n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]\nOutput: [null,0,1,1,1,0]\n</code></pre>\n<p><strong>Explanation of Input Syntax:</strong></p>\n<p>The input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, the array w. pickIndex has no arguments. Arguments are always wrapped with a list, even if there aren't any.</p>\n<h2 id=\"explanation\" style=\"position:relative;\"><a href=\"#explanation\" aria-label=\"explanation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explanation</h2>\n<p>This question is about randomly generating an index based on probability.</p>\n<p>For input <code>w = [1,3]</code> the probability for index <code>i</code> is as follows:</p>\n<pre><code>i = 0: 1/(3+1) = 1/4 = 25%\ni = 1: 3/(3+1)  = 3/4 = 75%\n</code></pre>\n<p>When the <code>pickIndex()</code> function is called, randomly pick an index based on the probability.</p>\n<h1 id=\"brute-force-on2--on2\" style=\"position:relative;\"><a href=\"#brute-force-on2--on2\" aria-label=\"brute force on2  on2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Brute Force: O(n<sup>2</sup>) / O(n<sup>2</sup>)</h1>\n<p>Where <em>s</em> is the sum of all weights in the array.</p>\n<h2 id=\"intuition\" style=\"position:relative;\"><a href=\"#intuition\" aria-label=\"intuition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intuition</h2>\n<p>The idea is same as picking up objects from a bag. For <code>[4,2]</code> there are four 0 objects, and two 1 objects. So it is the same as picking up any object from <code>[0,0,0,0,1,1]</code>.</p>\n<p>We can write an algorithm to create the array that represents the \"bag\" and then use <code>randint()</code> to pick up any random item from the bag.</p>\n<p>The problem with this solution is the the time and space complexity are horrible, because if we have simply an input of <code>[10000000000,10000000000]</code> we will be creating an array of length 20 Billion, meaning 20B runtime operations and 20B in space.</p>\n<p>In the worst case scenario such as input being <code>[4,4,4,4]</code> we will have a runtime and space complexity of <code>16</code> which is O(n<sup>2</sup>).</p>\n<h2 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h2>\n<pre><code class=\"language-py\">from random import random, randint\n\nclass Solution:\n    def __init__(self, w):\n        self.w = w\n\n    def pickIndex(self) -> int:\n        if len(self.w) &#x3C; 1:\n            return -1\n        sum = 0\n        for weight in self.w:\n            sum += weight\n        array = []\n        for i in range(len(self.w)):\n            counter = self.w[i]\n            while counter > 0:\n                array.append(i)\n                counter -=1\n        # print(randint(0,sum))\n        # print(array)\n        random_int = randint(0,len(array)-1)\n        return array[random_int]\n\nobj = Solution([4,2])\nprint(obj.pickIndex())\nobj = Solution([3,2,4])\nprint(obj.pickIndex())\n</code></pre>\n<p>We know that <code>math.random()</code> returns a value between 0 and 1. We need to combine this with the weight of the index.</p>\n<h1 id=\"cumulative-sum\" style=\"position:relative;\"><a href=\"#cumulative-sum\" aria-label=\"cumulative sum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cumulative Sum</h1>\n<h2 id=\"linear-search-on--on\" style=\"position:relative;\"><a href=\"#linear-search-on--on\" aria-label=\"linear search on  on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linear Search: O(n) / O(n)</h2>\n<pre><code class=\"language-py\">from random import random, randint\n\nclass Solution:\n      # O(n) / O(n)\n    def __init__(self, w):\n        self.w = w\n\n      # O(n) / O(1)\n    def pickIndex(self) -> int:\n        if len(self.w) &#x3C; 1:\n            return -1\n        array = [self.w[0]]\n        for i in range(1,len(self.w)):\n            array.append(self.w[i]+array[i-1])\n        num = randint(1,array[-1])\n        # print(array)\n        # print(num)\n        for i in range(len(array)):\n            if array[i] >= num:\n                return i\n</code></pre>\n<h2 id=\"binary-search-ologn--on\" style=\"position:relative;\"><a href=\"#binary-search-ologn--on\" aria-label=\"binary search ologn  on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binary Search: O(log(n)) / O(n)</h2>\n<p>Since <code>array</code> will always be in sorted order, we can find the position of the target <code>num</code> faster by using binary search.</p>\n<pre><code class=\"language-py\">from random import random, randint\n\nclass Solution:\n    def __init__(self, w):\n        self.w = w\n        self.array = [self.w[0]]\n        for i in range(1,len(self.w)):\n            self.array.append(self.w[i]+self.array[i-1])\n\n    def pickIndex(self) -> int:\n        num = randint(1,self.array[-1])\n        # binary search\n        left = 0\n        right = len(self.array)\n        while left &#x3C; right:\n            middle = left + (right - left) // 2\n            if num > self.array[middle]:\n                left = middle + 1\n            elif num &#x3C;= self.array[middle]:\n                right = middle\n        return left\n\nobj = Solution([4,2])\nprint(obj.pickIndex())\nobj = Solution([3,2,4])\nprint(obj.pickIndex())\n</code></pre>"}},"pageContext":{"slug":"528. Random Pick with Weight"}}}