{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0234 Palindrome Linked List","result":{"data":{"markdownRemark":{"frontmatter":{"title":"","date":null},"html":"<h1 id=\"0234-palindrome-linked-list\" style=\"position:relative;\"><a href=\"#0234-palindrome-linked-list\" aria-label=\"0234 palindrome linked list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0234. Palindrome Linked List</h1>\n<h2 id=\"234-palindrome-linked-list\" style=\"position:relative;\"><a href=\"#234-palindrome-linked-list\" aria-label=\"234 palindrome linked list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>234. Palindrome Linked List</h2>\n<p>Given a singly linked list, determine if it is a palindrome.</p>\n<pre><code class=\"language-text\">Example 1:\n\nInput: 1->2\nOutput: false\n</code></pre>\n<pre><code class=\"language-text\">Example 2:\n\nInput: 1->2->2->1\nOutput: true\n</code></pre>\n<p><strong>Follow up:</strong> Could you do it in O(n) time and O(1) space?</p>\n<h2 id=\"-two-pointer-shichunyu-on-may-6-2020\" style=\"position:relative;\"><a href=\"#-two-pointer-shichunyu-on-may-6-2020\" aria-label=\" two pointer shichunyu on may 6 2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>âœ… Two Pointer @shichunyu on May 6, 2020</h2>\n<p>Runtime: 80 ms, faster than 22.80% of Python3 online submissions for Palindrome Linked List. Memory Usage: 28.9 MB, less than 7.69% of Python3 online submissions for Palindrome Linked List.</p>\n<pre><code class=\"language-python\"># Definition for singly-linked list.\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        left = head\n        right = head\n        idx = 0\n        memo = {}\n\n        # If empty ListNode [] return False\n        if head == None:\n            return True\n\n        # If only one number [0] return True\n        if right.next == None:\n            return True\n\n        # move right pointer to very end\n        # initialize dictionary to allow back-tracking\n        while right.next:\n            memo[idx] = right\n            right = right.next\n            idx += 1\n\n        # check if is palindrome until the middle\n        while right != left and left.next != right:\n            if right.val == left.val:\n                print('checks out')\n            else:\n                return False\n            left = left.next\n            right = memo[idx-1]\n            idx -= 1\n        # if ODD: both at center node\n        if right == left:\n            return True\n        # If EVEN: check if values are same\n        if right.val == left.val:\n            return True\n        else:   \n            return False\n\n# d = ListNode(1)\n# c = ListNode(2,d)\n# b = ListNode(2,c)\n# a = ListNode(1,b)\n\n# s = Solution()\n# print (s.isPalindrome(a)) # True\n\n# f = ListNode(2) \n# e = ListNode(1,f)\n\n# s = Solution()\n# print(s.isPalindrome(e)) # False\n\ne = ListNode(1,)\nd = ListNode(2,e)\nc = ListNode(0,d)\nb = ListNode(2,c)\na = ListNode(1,b)\n\ns = Solution()\nprint (s.isPalindrome(a)) # True\n\n\"\"\"\n1 -> 2 -> 2 -> 1 Even\n     l    r\n1 >2 > 3 > 2 > 0 > 2 > 3 > 2 > 1 Odd\n^          ^       ^             ^\n\n\"\"\"\n</code></pre>\n<h2 id=\"find-midpoint--using-stack\" style=\"position:relative;\"><a href=\"#find-midpoint--using-stack\" aria-label=\"find midpoint  using stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Find Midpoint &#x26; Using Stack</h2>\n<p><code>O(N) Time</code> <code>O(N/2) Space</code></p>\n<p><strong>Question:</strong> would this work for odd lists?</p>\n<pre><code class=\"language-python\">def isPalindrome(self, head):\n\n    if not head or not head.next:\n        return True\n\n    # 1. Get the midpoint (slow)\n    slow = fast = cur = head\n    while fast and fast.next:\n        fast, slow = fast.next.next, slow.next\n\n    # 2. Push the second half into the stack\n    stack = [slow.val]\n    while slow.next:\n        slow = slow.next\n        stack.append(slow.val)\n\n    # 3. Comparison\n    while stack:\n        if stack.pop() != cur.val:\n            return False\n        cur = cur.next\n\n    return True\n</code></pre>\n<h2 id=\"reversing-list\" style=\"position:relative;\"><a href=\"#reversing-list\" aria-label=\"reversing list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reversing List</h2>\n<p><code>O(N) Time</code> <code>O(1) Space</code></p>\n<pre><code class=\"language-python\">\"\"\"\nnode = 0\n1 >2 > 3 > 2 > 0 &#x3C; 2 &#x3C; 3 &#x3C; 2 &#x3C; 1 Odd\nh                              n\n\n\"\"\"\ndef isPalindrome(self, head):\n    fast = slow = head\n    # find the mid node\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n    # reverse the second half\n    node = None\n    while slow:\n        nxt = slow.next\n        slow.next = node\n        node = slow\n        slow = nxt\n    # traverse forward &#x26; backwards &#x26; compare the first and second half nodes\n    while node: # while node and head:\n        if node.val != head.val:\n            return False\n        node = node.next\n        head = head.next\n    return True\n</code></pre>\n<h2 id=\"using-dequeue\" style=\"position:relative;\"><a href=\"#using-dequeue\" aria-label=\"using dequeue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Dequeue</h2>\n<pre><code class=\"language-python\"># O(n) space\ndef isPalindrome(self, head):\n    queue = collections.deque([])\n    cur = head\n    while cur:\n        queue.append(cur)\n        cur = cur.next\n    while len(queue) >= 2:\n        if queue.popleft().val != queue.pop().val:\n            return False\n    return True\n</code></pre>"}},"pageContext":{"slug":"0234 Palindrome Linked List"}}}