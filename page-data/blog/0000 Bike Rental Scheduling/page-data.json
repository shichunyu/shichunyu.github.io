{"componentChunkName":"component---src-templates-blog-js","path":"/blog/0000 Bike Rental Scheduling","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Bike Rental Scheduling","date":"2020-06-01T00:00:00.000Z"},"html":"<h1>Bike Rental Scheduling</h1>\n<h2>Bike Rental Scheduling</h2>\n<p>You are a bike shop. You rent bikes out to people every day, but you need to order the bikes in advance for a given day. As such, you need to know how many bikes will be used on any given day. However, if a bike is used in the morning for example, we can use it again in the evening(or whenever it is returned to the shop)</p>\n<blockquote>\n<p>input: list of times bikes are checked out from output: how many bikes we need for that given day</p>\n</blockquote>\n<pre><code class=\"language-text\">example: [[8, 11], [15, 16]]\noutput: 1\n\nexample: [[8, 11], [10, 16]]\noutput: 2\n\nexample: [[8, 11], [9, 10], [10, 16]]\noutput: 3\n</code></pre>\n<h2>Building Dictionay of every bike's schedules @shichunyu on May 24, 2020</h2>\n<p>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24</p>\n<ol>\n<li>start time</li>\n<li>does the start time of next one overlap? </li>\n<li>\n<p>is there a free bike? </p>\n<ol>\n<li>if yes, use that bike, if no, initialize a new bike</li>\n</ol>\n</li>\n</ol>\n<p>Data structure: nested array, or a dictionary</p>\n<p>print(s.numBikes([[1,5],[2,4],[3,9],[4,8],[5,11]])) #3</p>\n<pre><code class=\"language-text\">dic = {\n    1: [1,5],[5,11]\n    2: [2,4],[4,8]\n    3: [3,9]\n}\n</code></pre>\n<p>Code Steps:</p>\n<ul>\n<li>for each schedule item, check if first dic item has a conflict.</li>\n<li>if not, add to first dic item.</li>\n<li>if yes, look to next dic item. repeat until no dic items left</li>\n<li>if no dic item left, create new dic item, add the item.</li>\n</ul>\n<pre><code class=\"language-python\">class Solution:\n    def numBikes(self, schedule):\n        \"\"\"\n        type schedule: list[list[]]\n        rtype: int \n        \"\"\"\n        dic = {}\n        numbikes = 0\n        if schedule != []:\n            dic[1] = []\n            numbikes = 1\n        for item in schedule:\n            i = 1\n            added = False\n            if dic[i] == []:\n                dic[i].append(item)\n                continue\n            # check schedule for bike i\n            while i in dic:\n                conflict = False\n                # check every bike schedule item\n                for bike_item in dic[i]:\n                    # is the schedule item conflicting with this bike i's schedule item j\n                    if bike_item[0] &#x3C;= item[0] &#x3C; bike_item[1]:\n                        conflict = True\n                        break\n                # if no conflict after checking every time, add item to bike i's schedule\n                if not conflict:\n                    dic[i].append(item)\n                    added = True\n                    break\n                # if conflict with the bike, then try the next bike\n                else:\n                    i += 1\n            # add a new bike, and add item to its schedule\n            if added == False:\n                dic[i] = []\n                dic[i].append(item)\n                numbikes += 1\n        print(dic)\n        return numbikes\n\ns = Solution()\nprint(s.numBikes([[8,11], [15,16]])) # 1\nprint(s.numBikes([[8,11], [10,16]])) #2\nprint(s.numBikes([[8,11],[9,10],[10,16]])) #2\nprint(s.numBikes([[1,5],[2,4],[3,9],[4,8],[5,11]])) #3\nprint(s.numBikes([[1,5],[2,4],[3,9],[4,8],[5,11],[8,10]])) #3\nprint(s.numBikes([])) #0\n</code></pre>\n<h2>Heaps Solution</h2>\n<p>use heaps because we want to know when the next bike is available as soon as possible</p>\n<pre><code class=\"language-python\">minheap = [4,5,9]\nminheap = [5,8,9]\nminheap = [8,9,11]\n</code></pre>"}},"pageContext":{"slug":"0000 Bike Rental Scheduling"}}}